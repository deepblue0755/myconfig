# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    #alias grep='grep --color=auto'
    #alias fgrep='fgrep --color=auto'
    #alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
#alias ll='ls -l'
#alias la='ls -A'
#alias l='ls -CF'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# ------------------------------------------------------------ #
# Customer Settings
# ------------------------------------------------------------ #
function _set_env()
{
	local lua_dir=$(find /usr/local/lua/ -mindepth 1 -maxdepth 1 -type d | sort -Vr | head -n1)/bin
	local vim_dir=$(find /usr/local/vim/ -mindepth 1 -maxdepth 1 -type d | sort -Vr | head -n1)/bin
	
	if [[ -d ${lua_dir} ]] && ! echo "$PATH" | grep -q "${lua_dir}";then
		export PATH=${lua_dir}:$PATH
	fi

	if [[ -d ${vim_dir} ]] && ! echo "$PATH" | grep -q "${vim_dir}";then
		export PATH=${vim_dir}:$PATH
	fi

    export PATH=$PATH:~/scripts/

    export EDITOR=vim

    if [[ -z "$DISPLAY" ]];then
        export DISPLAY=:0
        xhost +local: &>/dev/null
    fi
}

function _grep_fn() 
{
    find ./ -type f -print0 | xargs -0 \grep --color=auto -n -i "$@"
}

function _rmkh()
{
    if [[ -z "$1" ]];then
        echo "ERROR: please input ip address"
    fi
    ssh-keygen -f "$HOME/.ssh/known_hosts" -R "$1"
}

function _set_alias()
{
	alias rm='rm -iv --preserve-root'
	alias cp='cp -iv'
	alias mv='mv -iv'
	alias reload='source ~/.bashrc'
    alias doc='pushd ~/documents &>/dev/null || echo "pushd to ~/documents failed"'
    alias ..='cd ..'
    alias ...='cd ../../'
    alias ....='cd ../../../'
    alias vi='vim --noplugin'
    alias ctags='ctags -f .tags --output-format=e-ctags'
    alias ctags++='\ctags -f .tags --languages=C,C++ --c++-kinds=+px --fields=+iaS --extras=+q  --sort=foldcase --output-format=e-ctags --exclude=build'
    alias config='vim ~/.bashrc'
    alias insmod='sudo /sbin/insmod'
    alias rmmod='sudo /sbin/rmmod'
    alias modinfo='sudo /sbin/modinfo'
    alias server='ssh huangmianbo@192.168.212.30'
    alias mount='sudo mount'
    alias umount='sudo umount'
    alias fdisk='/sbin/fdisk'
    alias grep='grep --color=auto --exclude-dir=.git'
    alias diff='colordiff'
    alias rmkh='_rmkh'
    alias motton='shuf -n 1 ~/documents/11-configs-from-github/03-NUC13VYKi7/mottos.txt'
    alias hometask='TASKRC=~/documents/10-github-documents/NUC13RNGi9/hometasks.taskrc task'
    alias hyctask='TASKRC=~/documents/10-github-documents/NUC13RNGi9/hyctasks.taskrc task'
}

function _set_history()
{
	shopt -s histappend
	export PROMPT_COMMAND="history -a; $PROMPT_COMMAND"
	HISTTIMEFORMAT="%F %T "
	HISTCONTROL=ignoredups:erasedups
	HISTIGNORE="&:ls:[bf]g:exit:clear"
}

function _set_miscs()
{
	set -o vi
}

function _git-branch-prompt 
{
    local branch=$(git symbolic-ref --short -q HEAD 2>/dev/null)
    test -n "$branch" &&  printf " [%s]" $branch
}

function _set_PS1()
{
    # Define color variables
    CYAN="\[\033[0;36m\]"
    GREEN="\[\033[0;32m\]"
    RESET="\[\033[0m\]"

    # only valid for bash
    if ps -p $$ -ocomm= | grep -q "bash" ;then
        PS1="${GREEN}\u@\h${RESET} ${CYAN}\W${RESET}${GREEN}\$(_git-branch-prompt)${RESET} \$ "
    fi
}

function googoltech_desktop_pc()
{
    local ip=""

    if /sbin/arp -a | grep -q "2c:f0:5d:c5:23:23";then
        ip=$(/sbin/arp -a | grep "2c:f0:5d:c5:23:23" | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')
    else
        :
    fi

    if [[ -n "$ip" ]];then
        ssh googol@$ip
    else
        echo "can not find googoltech desktop pc"
    fi

}

function autocommit()
{
    if ! git rev-parse --is-inside-work-tree &>/dev/null;then
        echo not a git repo
        return 1
    fi

    if ! git status | grep -q modified;then
        if ! git status | grep -q "new file";then
            echo "no modification or new file found in this repo"
            return 1
        fi
    fi

    echo "git pull ..."
    if git pull; then
       echo "successfully git pull"
    else
       echo "failed to git pull"
       return 1
    fi

    local commit_string=""
   
    if [[ $(git status | grep -c modified) -gt 1 ]];then
        files_list=$(git status | grep modified | awk -F: '{ print $2 }' | tr '\n' ',' | sed 's/^\s*//' | sed 's/  / /g')
        commit_string="UPDATE: Refactor $files_list from $HOSTNAME"
    elif [[  $(git status | grep -c modified) -eq 1  ]];then
        files_list=$(git status | grep modified | awk -F: '{ print $2 }' | sed 's/^\s*//' | sed 's/  / /g')
        commit_string="UPDATE: Refactor $files_list from $HOSTNAME"
    else
        :
    fi

    if [[ $(git status | grep -c "new file") -gt 1 ]];then
        files_list=$(git status | grep "new file" | awk -F: '{ print $2 }' | tr '\n' ',' | sed 's/^\s*//' | sed 's/  / /g')
        if [[ -n "$commit_string" ]];then
            commit_string="${commit_string}"$'\n'"NEW: Create new script $files_list from $HOSTNAME"
        else
            commit_string="NEW: Create new script $files_list from $HOSTNAME"
        fi
    elif [[ $(git status | grep -c "new file") -eq 1 ]];then
        files_list=$(git status | grep "new file" | awk -F: '{ print $2 }' | sed 's/^\s*//' | sed 's/  / /g')
        if [[ -n "$commit_string" ]];then
            commit_string="${commit_string}"$'\n'"NEW: Create new script $files_list from $HOSTNAME" 
        else
            commit_string="NEW: Create new script $files_list from $HOSTNAME"
        fi
    else
        :
    fi

    git commit -s -am "${commit_string}"

    echo "git push ..."
    if git remote | xargs -L1 git push ;then
       echo "successfully git push"
       return 0
    else
       echo "failed to git push"
       return 1
    fi
}

function enamegen()
{
    local namefile="/home/$(id -nu 1000)/documents/10-github-documents/NUC13RNGi9/English-given-names.txt"

    if [[ ! -f "${namefile}" ]];then
        echo "ERROR: can not find the file $namefile"
        return 1
    fi

    if [[ -z "$1" ]];then
        shuf -n 1 "${namefile}"
    else
        shuf -n 1 <(grep -i "^$1" "${namefile}")
    fi
}

function namegen()
{
    for app in curl jq;
    do
        which $app  &>/dev/null || return 1
    done
    curl -s https://randomuser.me/api/ | jq '.results[0].name | .first + " " + .last'
    return 0
}

function surnamegen()
{
    local namefile="/home/$(id -nu 1000)/documents/10-github-documents/NUC13RNGi9/English-surname.txt"

    if [[ ! -f "${namefile}" ]];then
        echo "ERROR: can not find the file $namefile"
        return 1
    fi

    if [[ -z "$1" ]];then
        shuf -n 1 "${namefile}"
    else
        shuf -n 1 <(grep -i "^$1" "${namefile}")
    fi
}

function anamegen()
{
    # generate random account name
    local first_name=$(enamegen)
    local last_name=$(surnamegen)
    local account_name="${first_name}_${last_name}_$(uuidgen -r | cut -c1-4)"
    account_name="${first_name}-${last_name}"
    echo $account_name
    echo "First Name: ${first_name}"
    echo "Last Name: ${last_name}"
    echo "Account Name: $account_name"
}


function wordgen()
{

    if [[ -z "$1" ]];then
        shuf -n 1 /usr/share/dict/words
    else
        shuf -n 1 <(grep "^$1" /usr/share/dict/words)
    fi

}

function wincopy()
{
    # FIXME can not access clipboard remotely
    # ssh mianb@10.0.0.3 "Powershell -File D:\Batch\Get-ClipBoard.ps1"
    # ssh mianb@10.0.0.3 "D:\Batch\Get-ClipBoard.bat"
    # ssh mianb@10.0.0.3 "powershell -command \"Get-ClipBoard > R:\Temp\clipboard.txt\""
    # ssh mianb@10.0.0.3 "type R:\Temp\clipboard.txt"
    :
    # | DISPLAY=:0 xclip -selection clipboard
}



_set_history
_set_env
_set_alias
_set_miscs
_set_PS1

