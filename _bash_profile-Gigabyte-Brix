# To the extent possible under law, the author(s) have dedicated all 
# copyright and related and neighboring rights to this software to the 
# public domain worldwide. This software is distributed without any warranty. 
# You should have received a copy of the CC0 Public Domain Dedication along 
# with this software. 
# If not, see <http://creativecommons.org/publicdomain/zero/1.0/>. 

# base-files version 4.2-4

# ~/.bash_profile: executed by bash(1) for login shells.

# The latest version as installed by the Cygwin Setup program can
# always be found at /etc/defaults/etc/skel/.bash_profile

# Modifying /etc/skel/.bash_profile directly will prevent
# setup from updating it.

# The copy in your home directory (~/.bash_profile) is yours, please
# feel free to customise it to create a shell
# environment to your liking.  If you feel a change
# would be benifitial to all, please feel free to send
# a patch to the cygwin mailing list.

# User dependent .bash_profile file

#---------------------------------------------------------------------#
# User Customer Setting # 
#---------------------------------------------------------------------#
if [ -e $USER ];then
    export USER=mianb
fi

if [ "$SHELL" == "/usr/bin/bash" ];then
    dir=
fi

if [ "$SHELL" == "/bin/bash" ];then
    dir=/cygdrive
fi

# ------------------------------------------------------------------- #
# Print Function
# ------------------------------------------------------------------- #
function print_infor()
{
    echo -e "\e[32minfor: $1\e[0m"
}

function print_warning()
{
    echo -e "\e[33mwarning: $1\e[0m"
}

function print_error()
{
    echo -e "\e[31merror: $1\e[0m"
}

# ------------------------------------------------------------------- #
# Customer Internal Function
# ------------------------------------------------------------------- #
function _backup_all()
{
    case $1 in 
        1)
            echo -----------------------------------------------------------------------------
            echo "1, enter $dir/d/documents pull update from github first"
            echo -----------------------------------------------------------------------------
            git_utils=$dir/d/documents/18-bash-utils/25_git_utils.sh
            test -f "$git_utils" || { print_error "could not find utils $git_utils" && return 1; }
            $git_utils pullall $dir/d/documents
            return 0;
        ;;
        2)
            echo -----------------------------------------------------------------------------
            echo "2, push updated config files from $HOME to cygwin64_config_gigabyte.git repo"
            echo -----------------------------------------------------------------------------
            local comment=""
            print_infor "entering $HOME ..."
            pushd $HOME &> /dev/null
            files=`git status | grep "modified:" | awk -F":" '{ print $2 }'`
            if [ -z "$files" ];then
                print_infor "no update config files from $HOME"
            else
                for file in $files
                do
                    echo 
                    if [ -f "$file" ];then
                        print_infor "git add $file ..."
                        git add "$file"
                        comment="$comment $file"
                    fi
                done
                print_infor "git commit -m \"update $comment from $USER@$HOSTNAME\""
                git commit -m "update $comment from $USER@$HOSTNAME"
                print_infor "git push -u $(git remote | sed -n '1p') master"
                git push -u $(git remote | sed -n '1p') master
                echo
            fi
            popd  &> /dev/null
            return 0;
        ;;
        3)
            echo -----------------------------------------------------------------------------
            echo "3, push updated config files to all machines config github repos"
            echo -----------------------------------------------------------------------------
            print_infor "entering $dir/d/documents/11-configs-from-github ..."
            pushd /d/documents/11-configs-from-github &> /dev/null
            test -f $dir/d/documents/11-configs-from-github/update_config_file.sh && \
            {  \
                print_infor "executing update_config_file.sh ..." &&  \
                $dir/d/documents/11-configs-from-github/update_config_file.sh \
            ;}
            popd &> /dev/null
            return 0;
        ;;
        *)
            # _backup_all 1
            _backup_all 2
            _backup_all 3
        ;;
    esac
}

function _code()
{
    $dir/d/Microsoft\ VS\ Code/Code.exe $* &
}

function _duty()
{
    ping -c 1  -W 1 192.168.0.22 &> /dev/null || return 1
    local logfile1=$dir/d/temp/duty_file_1
    case $1 in 
        1 | rsync)
            test -d /cygdrive/e/git || return 1
            test -f $logfile1 && return 0
            test -f $logfile1 || touch $logfile1
            test $(date +%H) -ge 20 &&  \
            _sync git
            return 0;
        ;;
        all)
            _duty 1
            # _sync 5
            return 0;
        ;;
    esac

}

function _expl()
{
    if [ -z "$1" ];then
        curdir=$PWD
        test "$PWD" == "$HOME" && curdir=/d/cygwin64/home/mianb
        explorer $(echo $curdir | sed 's/\//\\/g' | sed 's/^\\//g' | sed 's/\\/:\\/')
    else
        explorer $(echo $1 | sed 's/\//\\/g' | sed 's/^\\//g' | sed 's/\\/:\\/')
    fi
}

function _git-branch-prompt 
{
    
    local branch=$(git symbolic-ref --short -q HEAD 2>/dev/null)
    test -n "$branch" &&  printf " [%s]" $branch
}

function _gvim()
{
    if [ ! -z `echo $1 | grep \/` ];then
        echo vim $(_win_dir $1)
        $dir/d/Vim/vim81/gvim "$(_win_dir $1)" &
    else
        $dir/d/Vim/vim81/gvim --remote-silent $* &
    fi

    return  0
}

function _login_machine()
{
    case $1 in
        1 | mac)
            ssh huangmianbo@192.168.1.103
        ;;
        2 | t430)
            ssh -Y huangmianbo@192.168.1.105
        ;;
        3 | t580)
            ssh mianb@Huangs-T580
        ;;
        4 | pi3)
            ssh huangmianbo@raspberry3
        ;;
        5 | pi4)
            ssh pi@raspberrypi4
        ;;
        6 | rasp3)
            ssh huangmianbo@raspberry3
        ;;
        7 | rasp4)
            ssh huangmianbo@raspberrypi4
        ;;
        8 | gitlab)
            ssh huangmianbo@192.168.56.103
        ;;
        9 | vm)
            ssh huangmianbo@vmware
        ;;
        10 | zynq)
            ssh root@192.168.1.10
        ;;
        11 | cbpos)
            ssh root@192.168.0.2
        ;;
        *)
            :
        ;;
    esac
}

function _md2pdf()
{
    file=$1
    pdffile=${file/.md/.pdf/}
    if [ ! -f "$file" ];then
        print_error "there's no such file $file"
        return -1
    fi
    pandoc --pdf-engine=pdflatex $file -o $pdffile 
}

function _rand()
{
    test "$1" == "" && echo $RANDOM && return 0
    test "$2" == "" && echo $RANDOM && return 0
    let min=$1
    let max=$(($2-$min+1))
    num=$(cat /dev/urandom | head -n 10 | cksum | awk -F ' ' '{print $1}');
    echo $(($num%$max+$min))
}

function _randword()
{
    word_list=$dir/d/documents/18-bash-utils/00_en_dictionary_huge.dic
    test -f $word_list || { print_error "could not find file $word_list" && return 1; }
    let word_size=$(cat $word_list | grep "^[A-Z]" | wc -l)
    let line=$(uuidgen | cksum | cut -c 1-6)%$word_size
    cat $word_list | grep "^[A-Z]" | sed -n "$line p"
}

function _set_alias()
{
    alias ....='cd ../../../'
    alias ...='cd ../../'
    alias ..='cd ..'
    alias aspell-tex='aspell --mode=tex --list'
    alias ball='_backup_all'
    alias config='vim D:\\cygwin64\\home\\mianb\\.bash_profile' 
    alias cbpos='_login_machine cbpos'
    alias cmd='_sudo conemu'
    alias code='_code'
    alias diff='colordiff'
    alias dmidecode='systeminfo'
    alias doc='cd ~/documents'
    alias es='es -highlight'
    alias expl='_expl'
    alias find='$dir/d/cygwin64/bin/find'
    alias gbash='git-bash'
    alias gitlab='_login_machine gitlab'
    alias grep='grep --color=auto'
    alias gvim='_gvim'
    alias ifconfig='ipconfig'
    alias ls='ls --color=auto'
    alias lshw='systeminfo'
    alias mac='_login_machine mac'
    alias md2pdf='_md2pdf'
    alias mdkir='mkdir'
    alias mv='mv -iv'
    alias mygit='$dir/d/documents/18-bash-utils/25_git_utils.sh'
    alias mydate='date +%Y%m%d%H%M%S'
    alias mysync='_sync'
    alias pdf='_SumatraPDF'
    alias pi3='_login_machine pi3'
    alias pi4='_login_machine pi4'
    alias rand='_rand'
    alias randword='_randword'
    alias rasp3='_login_machine rasp3'
    alias rasp4='_login_machine rasp4'
    alias reload='source $HOME/.bash_profile' 
    alias rename='$dir/d/documents/18-bash-utils/01_rename_utils.sh'
    alias rm='rm -iv -d'
    alias start='_start'
    alias stop='_stop'
    alias service='_service'
    alias sudo='_sudo'
    alias syncbash='cp -iv $HOME/.bash_profile /cygdrive/f/05-To-From-Gigabyte-MiniComputer/'
    alias synctask='pushd . && cd $HOME && git pull origin master && popd'
    alias t430='_login_machine t430'
    alias t580='_login_machine t580'
    alias t='_tmux_new'
    alias tl='_task_list'
    alias typora='_typora'
    alias vb='gitlab'
    alias vi='\vim --no-plugin'
    alias videos='cd ~/videos'
    alias vivado='vivado -mode tcl'
    alias vim='_gvim'
    alias vlc='_vlc'
    alias vm='_login_machine vm'
    alias vmware='vm'
    alias xgrep='grep -nHR'
    alias zynq='_login_machine zynq'
    alias ~='cd ~'
}

function _set_path()
{
    PATH=$dir/d/emacs-26.2-x86_64/bin:$PATH
    PATH=$dir/c/Windows/System32:$PATH
    PATH=$dir/d/7-Zip-18.05-x64:$PATH
    PATH=$dir/d/Beyond\ Compare\ 3/:$PATH
    PATH=$dir/d/ES-1.1.0.10:$PATH
    PATH=$dir/d/Python27-64:$PATH
    PATH=$dir/d/Python37-64:$PATH
    PATH=$dir/d/VLC-3.0.6:$PATH
    PATH=$dir/d/Wireshark-3.0.1:$PATH
    PATH=$dir/d/ffmpeg-4.1.1/bin:$PATH
    PATH=$dir/d/gnuplot-5.2.6/bin:$PATH
    PATH=$dir/d/texlive/2018/bin/win32:$PATH
    PATH=$dir/d/vim/vim81/:$PATH
    PATH=$dir/d/SumatraPDF/:$PATH
    PATH=$dir/d/VMware/VMware\ Workstation:$PATH
    PATH=$dir/d/Oracle/VirtualBox:$PATH
    PATH=$dir/d/Typora/bin:$PATH
    PATH=$dir/d/MKVToolNix:$PATH
    PATH=$dir/d/ImageMagick:$PATH
    PATH=$dir/d/ConEmu/:$PATH


    # do not add cygwin/bin to $PATH
    if [ "$SHELL" == "/bin/bash" ];then
        PATH=$dir/d/cygwin64/bin/:$PATH
    else
        PATH=$dir/d/Git/usr/bin/:$PATH
    fi

    PATH=$dir/d/Git/bin:$PATH
    PATH=$dir/d/Git:$PATH

    export PATH
}

function _set_env_var()
{
    export RSYNC_PASSWORD=123456
    export EDITOR=$dir/d/Vim/vim81/gvim
    export DISPLAY=":0.0"
    export TASKDATA="$dir/d/documents/12-cygwin64-config-t580/.task"
    export PS1="\u@\h \[\033[0;36m\]\W\[\033[0m\]\[\033[0;32m\]\$(_git-branch-prompt)\[\033[0m\] \$ "
}

function _start()
{
    if [ $# -lt 1 ];then
        print_error "please specify which virtual machine to start"
        return 1
    fi

    case $1 in
        vm | ubuntu1404)

            check=`vmrun list | grep "Ubuntu-14.04-Kylin"` 
            if [ ! -z "$check" ];then
                echo ""
                echo "vmware machine is already starting"
                return 0
            fi
            echo start vmware machine ... 
            vmrun start "D:\\Vmware-Machines\\Ubuntu-14.04-Kylin\\\Ubuntu.vmx"  nogui
        ;;
        vb | ubuntu1804)
            check=`VBoxManage list runningvms | grep "Ubuntu-1804"` 
            if [ ! -z "$check" ];then
                echo ""
                print_warning "virtualbox machine is already starting"
                return 0
            fi
            echo start virtual box machine ... 
            VBoxManage startvm "Ubuntu-1804" --type headless
        ;;
        list)
            echo list virtual machines ...
            echo vmware:
            vmrun list
            echo
            echo virtualbox:
            VBoxManage list runningvms
        ;;
        rsync | sync)
            _sudo net start rsyncserver
        ;;
        *)
            print_error "unknown virtual machine start vm|vb"
        ;;
    esac
}

function _stop()
{
    if [ $# -lt 1 ];then
        print_error "please specify which virtual machine to start"
        return 1
    fi

    case $1 in
        vm | ubuntu1404)
            echo stop vmware machine ...  
            vmrun stop "D:\\Vmware-Machines\\Ubuntu-14.04-Kylin\\\Ubuntu.vmx" nogui
            VM_START=0
        ;;
        vb | ubuntu1804)
            echo stop virtual box machine ... 
            VBoxManage controlvm "Ubuntu-1804" poweroff
            VB_START=0
        ;;
        rsync | sync)
            _sudo net stop rsyncserver
        ;;
        *)
            print_error "unknown virtual machine,stop vm|vb"
        ;;
    esac
}

function _sudo()
{
    runas /user:administrator /savecred "$*"  
}

function _SumatraPDF()
{
    SumatraPDF $* &> /dev/null &
}

function _service()
{
    case $2 in 
        start)
            net start $1
        ;;
        stop)
            net stop $1
        ;;
    esac
}

function _sync()
{
    case $1 in 
        1 | kid_videos)
            local source_folder="/cygdrive/v/05.网络视频.YouTuBe.Downloading/"
            local dest_folder="/cygdrive/h/05.网络视频.YouTuBe.Downloading/"
            test -d "$source_folder"  || { print_error "could not find source folder $source_folder" && return 1; }
            test -d "$dest_folder"  || { print_error "could not find dest folder $dest_folder" && return 1; }
            rsync -var --progress --delete  \
            $source_folder  \
            $dest_folder
        ;;
        2 | ubuntu1804)
            rsync -vzrt --progress --include="*.vhd" --exclude=* \
            Huangs-T580::ubuntu-1804 \
            "/cygdrive/d/VirtualBox-VMs/Ubuntu-1804"  \
            --port=10556
        ;;
        3 | ubuntu1404)
            rsync -vzrt --progress --include="*.vmdk" --exclude=* \
            Huangs-T580::ubuntu-1404 \
            "/cygdrive/d/Vmware-Machines/Ubuntu-14.04-Kylin"  \
            --port=10556
        ;;
        4 | git | local_git_repo)
            rsync -vzrt --progress \
            Huangs-T580::local_git_repo \
            "/cygdrive/e/git"  \
            --port=10556
        ;;
        5 | slide )
            test -d "/cygdrive/n/04_Multimedia/02_Slides/" || { print_error "could not find source folder" && return 1; }
            print_infor "rsync t580 slide ..."
            rsync -vzrt --progress \
            Huangs-T580::slide  \
            "/cygdrive/n/04_Multimedia/02_Slides/" \
            --port=10556
        ;;
        6 | t580-videos )
            test -d "/cygdrive/m/99-Misc/" || { print_error "could not find source folder" && return 1; }
            print_infor "rsync t580 videos ..."
            rsync -vzrt --progress \
            Huangs-T580::t580-videos  \
            "/cygdrive/m/99-Misc/" \
            --port=10556
        ;;
        -h | --help)
            echo "$0 1:kid_videos|2:ubuntu1804|3:ubuntu1404|4:local_git_repo|5:slide|6:t580-videos"
        ;;
        *)
            echo "$0 1:kid_videos|2:ubuntu1804|3:ubuntu1404|4:local_git_repo|5:slide|6:t580-videos"
        ;;
    esac
}

function _task_list()
{
    case $1 in 
        1)
            task list proj:RTAI
            return 0
        ;;
        2)
            task list proj:infra
            return 0
        ;;
        3)
            task list proj:fpga
            return 0
        ;;
        a)
            task list
            return 0
        ;;
        *)
            task list
            return 0
        ;;
    esac
}


function _tmux_new()
{
    let tmux_cnt=`tmux list-sessions 2>&1 | grep -v "no server running" | grep ":" | wc -l`
    let tmux_cnt=$tmux_cnt+1

    case $1 in 
        1)
        tmux new -s session-$tmux_cnt -n cygwin
        ;;
        *)
        tmux new-session -d -s session-$tmux_cnt -n cygwin
        tmux new-window -d -n vmware
        tmux new-window -d -n cbpos
        tmux attach-session -d -t session-$tmux_cnt
        ;;
    esac
}

function _typora()
{
    typora.exe $* &
}

function _update_task()
{
    pushd . > /dev/null
    cd $HOME 
    files=`git status | grep modified: | grep .task | awk -F":" '{print $2}'`
    if [ -z "$files" ];then
        print_infor "no task to update ..."
        return 0
    else
        git add .task 
        git commit -m "update task from $HOSTNAME : $1" 
        git push -u git@github.com:deepblue0755/cygwin64_config_gigabyte.git master
    fi
    popd > /dev/null
}

function _win_dir()
{
    # this function is under debugging
    if [ $# -lt 1 ];then
        print_error "please input dir string"
        return 1
    fi


    if [ ! -z `echo $1 | grep cygdrive` ];then
        echo $1 | awk -F"/"   \
        '{ \
            for (i=3;i<=NF;i++)  \
                if ( i==3 )
                    printf("%s:\\", $i);  \
                else
                    printf("%s\\", $i);  \
                print "" \
         }'
     else
        echo $1 | awk -F"/"   \
        '{ \
            for (i=2;i<=NF;i++)  \
                if ( i==2 )
                    printf("%s:\\", $i);  \
                else
                    printf("%s\\", $i);  \
                print "" \
         }'
    fi
}

function _vlc()
{
    vlc $* &> /dev/null &
}
# ------------------------------------------------------------------- #
# Customer Main Function
# ------------------------------------------------------------------- #
function main()
{
    _set_path
    _set_alias
    _set_env_var

    if [ "$SHELL" == "/bin/bash" ];then
        task list 2> /dev/null
    fi

    set -o vi
    _duty all &
}

main $*
