# To the extent possible under law, the author(s) have dedicated all 
# copyright and related and neighboring rights to this software to the 
# public domain worldwide. This software is distributed without any warranty. 
# You should have received a copy of the CC0 Public Domain Dedication along 
# with this software. 
# If not, see <http://creativecommons.org/publicdomain/zero/1.0/>. 

# base-files version 4.2-4

# ~/.bash_profile: executed by bash(1) for login shells.

# The latest version as installed by the Cygwin Setup program can
# always be found at /etc/defaults/etc/skel/.bash_profile

# Modifying /etc/skel/.bash_profile directly will prevent
# setup from updating it.

# The copy in your home directory (~/.bash_profile) is yours, please
# feel free to customise it to create a shell
# environment to your liking.  If you feel a change
# would be benifitial to all, please feel free to send
# a patch to the cygwin mailing list.

# User dependent .bash_profile file

#---------------------------------------------------------------------#
# User Customer Setting # 
#---------------------------------------------------------------------#
if [ -e $USER ];then
    export USER=mianb
fi

if [ "$SHELL" == "/usr/bin/bash" ];then
    dir=
fi

if [ "$SHELL" == "/bin/bash" ];then
    dir=/cygdrive
fi

# ------------------------------------------------------------------- #
# Print Function
# ------------------------------------------------------------------- #
function print_infor()
{
    echo -e "\e[32minfor: $1\e[0m"
}

function print_warning()
{
    echo -e "\e[33mwarning: $1\e[0m"
}

function print_error()
{
    echo -e "\e[31merror: $1\e[0m"
}

# ------------------------------------------------------------------- #
# Customer Internal Function
# ------------------------------------------------------------------- #
function _backup_config()
{
    pushd . > /dev/null

    cd ~

    git pull $(git remote) master

    comment=""

    files=`git status | grep modified: | awk -F":" '{print $2}'`
    if [ -z "$files" ];then
        print_infor "no task to update ..."
        return 0
    fi

    echo ""
    for file in $files
    do
        if [ -f "$file" ];then
            print_infor "git add $file ... "
            git add "$file"
            comment="$comment $file"
        fi
    done

    print_infor "git commit -m \"update file $comment from $USER $HOSTNAME\""
    git commit -m "update file $comment from $USER $HOSTNAME"

    print_infor "git push -u $(git remote) master ... "
    git push -u $(git remote) master

    echo ""

    print_infor "now synchronous to all-config folder ..."

    cd $dir/d/documents/11-configs-from-github
    
    ./update_config_file.sh

    popd > /dev/null
}

function _backup_all()
{
    pushd . &> /dev/null
    cd $dir/d/documents
    let i=0;
    for folder in *
    do
        test -d "$folder" || continue
        echo ----------------------------------------------------------
        let i=$i+1
        echo "$i , cd $folder ..."
        cd "$folder"
        check=`git remote -v 2> /dev/null | grep fetch | awk '{ print $1 }'` 
        test -n "$check" || { echo "$folder is not a git repos!!" && cd .. && continue; } 
        echo
        echo update git folder $folder 
        echo git pull $(git remote | sed -n 1p) master ...
        echo
        test -n "$(git remote)" && git pull $(git remote | sed -n 1p) master
        cd  ..
        echo ----------------------------------------------------------
    done
    popd &> /dev/null

    _backup_all_2
}

function _backup_all_2()
{
    pushd . &> /dev/null

    echo -------------------------------------------
    echo 4, update config files from gigabyte-brix
    echo -------------------------------------------
    comment=
    cd ~
    files=`git status | grep "modified:" | awk -F":" '{ print $2 }'`
    if [ -z "$files" ];then
        print_infor "no update config files from $HOME"
    else
        for file in $files
        do
            echo 
            if [ -f "$file" ];then
                print_infor "git add $file ..."
                git add "$file"
                comment="$comment $file"
            fi
        done
        print_infor "git commit -m \"update $comment from $USER @ $HOSTNAME\""
        git commit -m "update $comment from $USER @ $HOSTNAME"
        print_infor "git push -u $(git remote | sed -n 1p) master"
        git push -u $(git remote | sed -n 1p) master
        echo
    fi
    

    popd  &> /dev/null
}

function _expl()
{
    if [ -z "$1" ];then
        curdir=$PWD
        test "$PWD" == "$HOME" && curdir=/d/cygwin64/home/mianb
        explorer $(echo $curdir | sed 's/\//\\/g' | sed 's/^\\//g' | sed 's/\\/:\\/')
    else
        explorer $(echo $1 | sed 's/\//\\/g' | sed 's/^\\//g' | sed 's/\\/:\\/')
    fi
}

function _gvim()
{
    if [ ! -z `echo $1 | grep \/` ];then
        echo vim $(_win_dir $1)
        $dir/d/Vim/vim81/gvim "$(_win_dir $1)" &
    else
        $dir/d/Vim/vim81/gvim --remote-silent $* &
    fi

    return  0
}

function _login_machine()
{
    case $1 in
        mac)
            ssh huangmianbo@192.168.1.103
        ;;
        t430)
            ssh huangmianbo@t430
        ;;
        t580)
            ssh mianb@Huangs-T580
        ;;
        pi3)
            ssh huangmianbo@raspberry3
        ;;
        pi4)
            ssh pi@raspberrypi4
        ;;
        rasp3)
            ssh huangmianbo@raspberry3
        ;;
        rasp4)
            ssh huangmianbo@raspberrypi4
        ;;
        gitlab)
            ssh huangmianbo@192.168.56.103
        ;;
        vm)
            ssh huangmianbo@vmware
        ;;
        zynq)
            ssh root@192.168.1.10
        ;;
        *)
            :
        ;;
    esac
}

function _md2pdf()
{
    file=$1
    pdffile=${file/.md/.pdf/}
    if [ ! -f "$file" ];then
        print_error "there's no such file $file"
        return -1
    fi
    pandoc --pdf-engine=pdflatex $file -o $pdffile 
}

function _pushd()
{
    test -n "$1" || { pushd . && return 0; }

    for((i=0;i<5;i++))
    do
        pushd $*
    done

    return 0
}

function _rand()
{
    test "$1" == "" && echo $RANDOM && return 0
    test "$2" == "" && echo $RANDOM && return 0
    let min=$1
    let max=$(($2-$min+1))
    num=$(cat /dev/urandom | head -n 10 | cksum | awk -F ' ' '{print $1}');
    echo $(($num%$max+$min))
}

function _randword()
{
    word_list=$dir/d/documents/18-bash-utils/00_en_dictionary_huge.dic
    test -f $word_list || { print_error "could not find file $word_list" && return 1; }
    let word_size=$(cat $word_list | grep "^[A-Z]" | wc -l)
    let line=$(uuidgen | cksum | cut -c 1-6)%$word_size
    cat $word_list | grep "^[A-Z]" | sed -n "$line p"
}

function _set_alias()
{
    alias ....='cd ../../../'
    alias ...='cd ../../'
    alias ..='cd ..'
    alias aspell-tex='aspell --mode=tex --list'
    alias ball='_backup_all'
    alias config='vim D:\\cygwin64\\home\\mianb\\.bash_profile' 
    alias diff='colordiff'
    alias dmidecode='systeminfo'
    alias doc='cd ~/documents'
    alias es='es -highlight'
    alias expl='_expl'
    alias find='$dir/d/cygwin64/bin/find'
    alias gbash='git-bash'
    alias gitlab='_login_machine gitlab'
    alias grep='grep --color=auto'
    alias ifconfig='ipconfig'
    alias ls='ls --color=auto'
    alias lshw='systeminfo'
    alias mac='_login_machine mac'
    alias md2pdf='_md2pdf'
    alias mdkir='mkdir'
    alias mv='mv -iv'
    alias mydate='date +%Y%m%d%H%M%S'
    alias pdf='_SumatraPDF'
    alias pi3='_login_machine pi3'
    alias pi4='_login_machine pi4'
    alias pushd='_pushd $*'
    alias rand='_rand'
    alias randword='_randword'
    alias rasp3='_login_machine rasp3'
    alias rasp4='_login_machine rasp4'
    alias reload='source $HOME/.bash_profile' 
    alias rm='rm -iv -d'
    alias start='_start'
    alias stop='_stop'
    alias service='_service'
    alias syncbash='cp -iv $HOME/.bash_profile /cygdrive/f/05-To-From-Gigabyte-MiniComputer/'
    alias synctask='pushd . && cd $HOME && git pull origin master && popd'
    alias t430='_login_machine t430'
    alias t580='_login_machine t580'
    alias t='_tmux_new'
    alias tl='_task_list'
    alias typora='_typora'
    alias vb='gitlab'
    alias vi='vim'
    alias videos='cd ~/videos'
    alias vivado='vivado -mode tcl'
    alias vim='_gvim'
    alias vlc='_vlc'
    alias vm='_login_machine vm'
    alias vmware='vm'
    alias xgrep='grep -nHR'
    alias zynq='_login_machine zynq'
    alias ~='cd ~'
}

function _set_path()
{
    PATH=$dir/d/emacs-26.2-x86_64/bin:$PATH
    PATH=$dir/c/Windows/System32:$PATH
    PATH=$dir/d/7-Zip-18.05-x64:$PATH
    PATH=$dir/d/Beyond\ Compare\ 3/:$PATH
    PATH=$dir/d/ES-1.1.0.10:$PATH
    PATH=$dir/d/Python27-64:$PATH
    PATH=$dir/d/Python37-64:$PATH
    PATH=$dir/d/VLC-3.0.6:$PATH
    PATH=$dir/d/Wireshark-3.0.1:$PATH
    PATH=$dir/d/ffmpeg-4.1.1/bin:$PATH
    PATH=$dir/d/gnuplot-5.2.6/bin:$PATH
    PATH=$dir/d/texlive/2018/bin/win32:$PATH
    PATH=$dir/d/vim/vim81/:$PATH
    PATH=$dir/d/SumatraPDF/:$PATH
    PATH=$dir/d/VMware/VMware\ Workstation:$PATH
    PATH=$dir/d/Oracle/VirtualBox:$PATH
    PATH=$dir/d/Typora/bin:$PATH
    PATH=$dir/d/MKVToolNix:$PATH
    PATH=$dir/d/ImageMagick:$PATH


    # do not add cygwin/bin to $PATH
    if [ "$SHELL" == "/bin/bash" ];then
        PATH=$dir/d/cygwin64/bin/:$PATH
    else
        PATH=$dir/d/Git/usr/bin/:$PATH
    fi

    PATH=$dir/d/Git/bin:$PATH
    PATH=$dir/d/Git:$PATH

    export PATH
}

function _set_env_var()
{
    export RSYNC_PASSWORD=123456
    export EDITOR=$dir/d/Vim/vim81/gvim
}

function _start()
{
    if [ $# -lt 1 ];then
        print_error "please specify which virtual machine to start"
        return 1
    fi

    case $1 in
        vm)
            check=`vmrun list | grep "Ubuntu-14.04-Kylin"` 
            if [ ! -z "$check" ];then
                echo ""
                echo "vmware machine is already starting"
                return 0
            fi
            echo start vmware machine ... 
            vmrun start "D:\\Virtual Machines\\Ubuntu-14.04-Kylin\\\Ubuntu.vmx"  nogui
        ;;
        vb)
            check=`VBoxManage list runningvms | grep "Ubuntu-1804"` 
            if [ ! -z "$check" ];then
                echo ""
                echo "virtualbox machine is already starting"
                return 0
            fi
            echo start virtual box machine ... 
            VBoxManage startvm "Ubuntu-1804" --type headless
        ;;
        list)
            echo list virtual machines ...
            echo vmware:
            vmrun list
            echo
            echo virtualbox:
            VBoxManage list runningvms
        ;;
        *)
            print_error "unknown virtual machine start vm|vb"
        ;;
    esac
}

function _stop()
{
    if [ $# -lt 1 ];then
        print_error "please specify which virtual machine to start"
        return 1
    fi

    case $1 in
        vm)
            echo stop vmware machine ...  
            vmrun stop "D:\\Virtual Machines\\Ubuntu-14.04-Kylin\\\Ubuntu.vmx" nogui
            VM_START=0
        ;;
        vb)
            echo stop virtual box machine ... 
            VBoxManage controlvm "Ubuntu-1804" poweroff
            VB_START=0
        ;;
        *)
            print_error "unknown virtual machine,stop vm|vb"
        ;;
    esac
}

function _SumatraPDF()
{
    SumatraPDF $* &> /dev/null &
}

function _service()
{
    case $2 in 
        start)
            net start $1
        ;;
        stop)
            net stop $1
        ;;
    esac
}

function _sync()
{
    case $1 in 
        1)
            rsync -var --progress --delete  \
            /cygdrive/v/05.网络视频.YouTuBe.Downloading/  \
            /cygdrive/h/05.网络视频.YouTuBe.Downloading/ 
        ;;
        2)
            rsync -vzrt --progress --include="*.vhd" --exclude=* \
            Huangs-T580::ubuntu-1804 \
            "/cygdrive/d/VirtualBox-VMs/Ubuntu-1804"  \
            --port=10556
        ;;
        book1)
            rsync -var --progress --delete  \
            /cygdrive/n/01_Books/Linux  \
            /cygdrive/t/

        ;;
        *)
            rsync -varzt --progress --delete Huangs-T580::temp /cygdrive/d/temp --port=10556
        ;;
    esac
}

function _task_list()
{
    case $1 in 
        1)
            task list proj:RTAI
            return 0
        ;;
        2)
            task list proj:infra
            return 0
        ;;
        3)
            task list proj:fpga
            return 0
        ;;
        a)
            task list
            return 0
        ;;
        *)
            task list
            return 0
        ;;
    esac
}


function _tmux_new()
{
    let tmux_cnt=`tmux list-sessions 2>&1 | grep -v "no server running" | grep ":" | wc -l`
    let tmux_cnt=$tmux_cnt+1

    case $1 in 
        1)
        tmux new -s session-$tmux_cnt -n cygwin
        ;;
        *)
        tmux new-session -d -s session-$tmux_cnt -n cygwin
        tmux new-window -d -n vmware
        tmux new-window -d -n cbpos
        tmux attach-session -d -t session-$tmux_cnt
        ;;
    esac
}

function _typora()
{
    typora.exe $* &
}

function _update_task()
{
    pushd . > /dev/null
    cd $HOME 
    files=`git status | grep modified: | grep .task | awk -F":" '{print $2}'`
    if [ -z "$files" ];then
        print_infor "no task to update ..."
        return 0
    else
        git add .task 
        git commit -m "update task from $HOSTNAME : $1" 
        git push -u git@github.com:deepblue0755/cygwin64_config_gigabyte.git master
    fi
    popd > /dev/null
}

function _win_dir()
{
    # this function is under debugging
    if [ $# -lt 1 ];then
        print_error "please input dir string"
        return 1
    fi


    if [ ! -z `echo $1 | grep cygdrive` ];then
        echo $1 | awk -F"/"   \
        '{ \
            for (i=3;i<=NF;i++)  \
                if ( i==3 )
                    printf("%s:\\", $i);  \
                else
                    printf("%s\\", $i);  \
                print "" \
         }'
     else
        echo $1 | awk -F"/"   \
        '{ \
            for (i=2;i<=NF;i++)  \
                if ( i==2 )
                    printf("%s:\\", $i);  \
                else
                    printf("%s\\", $i);  \
                print "" \
         }'
    fi
}

function _vlc()
{
    vlc $* &> /dev/null &
}
# ------------------------------------------------------------------- #
# Customer Main Function
# ------------------------------------------------------------------- #
_set_path
_set_alias
_set_env_var

if [ "$SHELL" == "/bin/bash" ];then
    task list
fi

set -o vi
