# To the extent possible under law, the author(s) have dedicated all 
# copyright and related and neighboring rights to this software to the 
# public domain worldwide. This software is distributed without any warranty. 
# You should have received a copy of the CC0 Public Domain Dedication along 
# with this software. 
# If not, see <http://creativecommons.org/publicdomain/zero/1.0/>. 

# base-files version 4.3-2

# ~/.bash_profile: executed by bash(1) for login shells.

# The latest version as installed by the Cygwin Setup program can
# always be found at /etc/defaults/etc/skel/.bash_profile

# Modifying /etc/skel/.bash_profile directly will prevent
# setup from updating it.

# The copy in your home directory (~/.bash_profile) is yours, please
# feel free to customise it to create a shell
# environment to your liking.  If you feel a change
# would be benifitial to all, please feel free to send
# a patch to the cygwin mailing list.

# User dependent .bash_profile file

# source the users bashrc if it exists
if [ -f "${HOME}/.bashrc" ] ; then
  source "${HOME}/.bashrc"
fi

# Set PATH so it includes user's private bin if it exists
# if [ -d "${HOME}/bin" ] ; then
#   PATH="${HOME}/bin:${PATH}"
# fi

# Set MANPATH so it includes users' private man if it exists
# if [ -d "${HOME}/man" ]; then
#   MANPATH="${HOME}/man:${MANPATH}"
# fi

# Set INFOPATH so it includes users' private info if it exists
# if [ -d "${HOME}/info" ]; then
#   INFOPATH="${HOME}/info:${INFOPATH}"
# fi

######################################################################
# User Defined Setting # 
######################################################################
export TERM=xterm-256color
export OUTPUT_CHARSET="cp936"
if [ "$SHELL" == "/bin/bash" ];then
    export dir=/cygdrive
else
    export dir=
fi

#----------------------------------#
# Customer User Function # 
#----------------------------------#
function print_infor()
{
    echo -e "\e[32minfor: $1\e[0m"
}

function print_warning()
{
    echo -e "\e[33mwarning: $1\e[0m"
}

function print_error()
{
    echo -e "\e[31merror: $1\e[0m"
}

function _burn()
{
    if [ ! -f "$1" ];then
        print_error "file $1 could not be found"
        return
    fi

    if [ $# -lt 2 ];then
        ip=192.168.0.2
    else
        ip=$2
    fi

    scp $1 root@$ip:/tmp/
    ssh root@$ip "burn /tmp/$1"
}

function _backup_doc()
{
    pushd $dir/d/documents/RTAI &> /dev/null
    flag=0
    comment=""

    check=`git diff 00-rtai-x86-ubuntu-1404.md | wc -c`
    if [ "$check" != "0" ];then
        print_infor "git add 00-rtai-x86-ubuntu-1404.md ..."
        git add 00-rtai-x86-ubuntu-1404.md
        flag=1
        comment=$comment" 00-rtai-x86-ubuntu-1404.md"
    fi

    check=`git diff Makefile | wc -c`
    if [ "$check" != "0" ];then
        print_infor "git add Makefile ..."
        git add Makefile
        flag=1
        comment=$comment" Makefile"
    fi

    check=`git diff .gitignore | wc -c`
    if [ "$check" != "0" ];then
        print_infor "git add .gitignore ..."
        git add .gitignore
        flag=1
        comment=$comment" .gitignore"
    fi

    if [ "$flag" == "1" ];then
        print_infor "commit change to local  ..."
        git  commit -m "update $comment from $USER@$HOSTNAME"
        echo 
        git push -u local master
        git push -u server master

        echo
        print_infor "update to common folder ..."

        pushd . > /dev/null
        cd $dir/d/documents/10-github-documents/ 
        ./update_documents_from_local.sh 
        popd > /dev/null

    else
        print_infor "no update ,nothing to backup"
    fi

    popd > /dev/null
}

function _backup_task()
{
    pushd .  > /dev/null
    flag=0
    
    cd ~
    check=`git diff .taskrc | wc -c`
    if [ "$check" != "0" ];then
        print_infor "git add .taskrc ..."
        git add .taskrc
        flag=1
    fi

    check=`git diff .task | wc -c`
    if [ "$check" != "0" ];then
        print_infor "git add .task ..."
        git add .task
        flag=1
    fi

    if [ "$flag" == "1" ];then
        print_infor "commit change to local "
        git  commit -m "update taskwarrior from $USER@$HOSTNAME"
        git push -u $(git remote | sed -n 1p) master
    else
        print_infor "no update ,nothing to backup"
    fi
    
    popd > /dev/null
}

function _backup_bash()
{
    pushd .  &> /dev/null
    flag=0
    
    cd ~
    check=`git diff .bash_profile | wc -c`
    if [ "$check" != "0" ];then
        print_infor "git add .bash_profile ..."
        git add .bash_profile
        flag=1
    fi

    if [ "$flag" == "1" ];then
        print_infor "commit change to local"
        git  commit -m "update .bash_profile from $USER@$HOSTNAME"
        git push -u $(git remote | sed -n 1p) master

        print_infor "update to common config folders ..."
        echo
        pushd . > /dev/null
        cd $dir/d/documents/11-configs-from-github/
        ./update_config_file.sh
        popd > /dev/null
    else
        print_infor "no update ,nothing to backup"
    fi

    
    popd &> /dev/null
}

function _backup_config()
{
    pushd . &> /dev/null

    print_infor "cd $dir/d/documents/11-configs-from-github"
    cd $dir/d/documents/11-configs-from-github

    ./update_config_file.sh

    files=`git status | grep modified | awk -F: '{print $2}'`

    if [ -z "$files" ];then
        print_infor "no file need to git add " 
        popd > /dev/null
        return 0
    fi

    for file in $files
    do
        print_infor "git add $file ..."
        git add $file
    done

    print_infor "git commit -m \"udpate config file from $USER @ $HOSTNAME \" ..."
    git commit -m "udpate config file from $USER @ $HOSTNAME "

    git push -u origin master

    echo 
    print_infor "---------------------------------------------------------"
    print_infor "Now,Git Backup Config File In $home"
    print_infor "---------------------------------------------------------"
    cd ~
    comment=""

    files=`git status | grep modified | awk -F: '{print $2}'`
    files=`echo $files | grep ".bash_profile \| .tmux.conf \| .taskrc \| .task"`
    if [ -z "$files" ];then
        print_infor "no file in $HOME need to git add " 
        popd > /dev/null
        return 0
    fi
    echo
    for file in $files
    do
        print_infor "git add $file ..."
        git add $file
    done
    print_infor "git commit -m \"update files $comment from $USER @ $HOSTNAME\""
    git commit -m "update files $comment from $USER @ $HOSTNAME"
    git push -u $(git remote | sed -n 1p) master
    echo


    popd &> /dev/null
}

function _backup_scripts()
{
    pushd . &> /dev/null

    cd $dir/d/documents/16-bash-scripts

    ./update_bash_files.sh t580
    ./update_bash_files.sh cbpos
    ./update_bash_files.sh server

    popd &> /dev/null
}

function _backup_all()
{
    case $1 in 
        4)
            echo "--------------------------------------"
            echo "3, backup taskwarrior ..."
            echo "--------------------------------------"
            echo 
            _backup_task
            return 0
        ;;
        5)
            echo "--------------------------------------"
            echo "5, backup bash scripts to github ..."
            echo "--------------------------------------"
            echo 
            _backup_scripts
            return 0
        ;;
        *)
            echo "--------------------------------------"
            echo "1, backup doc ..."
            echo "--------------------------------------"
            echo 
            _backup_doc

            echo "--------------------------------------"
            echo "2, backup bash profile ..."
            echo "--------------------------------------"
            echo 
            _backup_bash

            echo "--------------------------------------"
            echo "3, backup taskwarrior ..."
            echo "--------------------------------------"
            echo 
            _backup_task

            echo "--------------------------------------"
            echo "4, backup config file to github ..."
            echo "--------------------------------------"
            echo 
            _backup_config

            echo "--------------------------------------"
            echo "5, backup bash scripts to github ..."
            echo "--------------------------------------"
            echo 
            _backup_scripts

            return 0
        ;;
    esac
}

function _bcomp()
{
    BCompare $* &> /dev/null &
}

function _code()
{
    code $1 &> /dev/null &
}

function _cplinux()
{
    { test -f "$2" || test -d "$2"; } || { print_error "file $2 does not exist!!" && return 1; }  
    test -d "$2" && { option=-pr; }
    test -f "$2" && { option=-p; }
    case $1 in 
        t430)
            scp $option "$2" huangmianbo@192.168.1.105:/tmp/
        ;;
        mac)
            scp $option "$2" huangmianbo@192.168.1.103:/tmp/
        ;;
        server)
            scp $option "$2" huangmianbo@192.168.212.30:/tmp/
        ;;
        ideabox)
            scp $option "$2" root@cbpos:/tmp/
        ;;
        vm)
            scp $option "$2" huangmianbo@vmware:/tmp/
        ;;
        gitlab)
            scp $option "$2" huangmianbo@gitlab:/tmp/
        ;;
        debian)
            scp $option "$2" huangmianbo@192.168.56.118:/tmp/
        ;;
        *)
            scp $option "$2" root@cbpos:/tmp/
        ;;
    esac
}

function _dmesg()
{
    case $1 in
        *)
        ssh root@192.168.0.2 "dmesg"
        ;;
    esac
}

function _done_102()
{
    the_date=`date +%Y%m%d`
    pushd . &> /dev/null
    cd  $dir/d/102-delivery/

    mkdir -p done_$the_date

    for file in *
    do
        if [ -f "$file" ];then
            mv "$file" done_$the_date
        fi
    done

    popd  &> /dev/null
}

function _duty()
{
    local logfile1=$dir/d/temp/duty_file_1
    local logfile2=$dir/d/temp/duty_file_2
    local logfile3=$dir/d/temp/start_vm
    local logfile4=$dir/d/temp/sync_cpac
    local logfile5=$dir/d/temp/rsync_start
    case $1 in 
        1 | rsync)
            ping -c 1 -W 1 192.168.212.30 &> /dev/null || return 1
            test -f $logfile1 && return 0
            test -f $logfile1 || touch $logfile1
            test $(date +%H) -eq 9 &&  \
            test $(date +%M) -lt 30 &&  \
            _sync git
            return 0;
        ;;
        2 | gitlab-backup)
            ping -c 1 -W 1 192.168.212.30 &> /dev/null || return 1
            test -f $logfile2 && return 0
            test -f $logfile2 || touch $logfile2
            local gitlab_backup_file=`ssh huangmianbo@192.168.212.30 "ls -t /home/huangmianbo/share/*gitlab_backup*.tar | head -n 1"`
            test -n "$gitlab_backup_file" || return 1
            local cnt=1
            for file in $(ls -t $dir/d/backup/gitlab-ce/*gitlab_backup*.tar)
            do
                test $cnt -gt 10 && rm -fv $file
                let cnt=$((cnt+1))
            done
            test $(date +%H) -eq 9 &&  \
            test $(date +%M) -lt 30 &&  \
            rsync -vzrt --progress -e ssh huangmianbo@192.168.212.30:$gitlab_backup_file $dir/d/backup/gitlab-ce/$(basename $gitlab_backup_file)
            return 0;
        ;;
        3 | start_vm)
            ping -c 1 -W 1 192.168.212.30 &> /dev/null || return 1
            test -f $logfile3 && return 0
            test -f $logfile3 || touch $logfile3
            test $(date +%H) -eq 9 &&  \
            test $(date +%M) -lt 30 &&  \
            _start vm
            return 0;
        ;;
        4 | sync_cpac)
            ping -c 1 -W 1 192.168.212.30 &> /dev/null || return 1
            test -f $logfile4 && return 0
            test -f $logfile4 || touch $logfile4
            test $(date +%H) -eq 9 &&  \
            test $(date +%M) -lt 30 &&  \
            pushd $dir/d/documents/23-CPAC_Products &> /dev/null && \
            git pull origin master && \
            popd &> /dev/null
        ;;
        5 | start_rsync)
            tasklist | grep rsync &> /dev/null && return 0
            test $(date +%H) -lt 20 && return 0
            test -f $logfile5 && return 0 
            test -f $logfile5 || touch $logfile5 
            _start rsync
        ;;
        all)
            _duty 1
            _duty 2
            _duty 3
            _duty 4
            _duty 5
            return 0;
        ;;
    esac
}

function _export_var()
{
    export TIME_STYLE="+%Y/%m/%d %H:%M:%S"
    export TZ="CEST-8"
    export EDITOR=gvim
    export SVN_EDITOR=vim
    export HISTSIZE=10000
    export HISTFILESIZE=100000
    export HISTTIMEFORMAT="%F %T "
    export HISTIGNORE="ls:history:clear:pwd"
    export pnio=/d/Profinet/DevKit46/pnio_src
    export proj=/d/Profinet/DevKit46/pnio_proj/ertec/EB200P_Size_EcosNative/
    export CMAKE_ROOT=$dir/d/cmake/
    export RSYNC_PASSWORD=123456
    export DISPLAY=:0.0
}

function _expl()
{
    # echo $1 | grep "\" > /dev/null && print_error "not a cygdrive path" &&  return 1
    case $1 in 
        youtube)
           explorer "D:\\Batch\\97-YouTube-Downloading"
        ;;
        tmp)
            explorer "D:\\temp"
        ;;
        *)
            if [ -z "$1" ];then
                curdir=$PWD
                test "$PWD" == "$HOME" && curdir=/d/cygwin64/home/mianb
                echo "$PWD" | grep "$HOME" && curdir=/d/cygwin64$PWD
                test -d "$curdir" || { print_error "folder $curdir does not exist!!" && return 1; }
                echo explorer "$(echo $curdir | sed 's/\//\\/g' | sed 's/^\\//g' | sed 's/\\/:\\/')"
                explorer "$(echo $curdir | sed 's/\//\\/g' | sed 's/^\\//g' | sed 's/\\/:\\/')"
            else
                mydir=$(echo $1 | sed 's/\/home\/mianb\///g')
                mydir=/d/cygwin64/home/mianb/$mydir
                test -d "$curdir" || { print_error "folder $curdir does not exist!!" && return 1; }
                echo explorer "$(echo $mydir | sed 's/\//\\/g' | sed 's/^\\//g' | sed 's/\\/:\\/')"
                explorer "$(echo $mydir | sed 's/\//\\/g' | sed 's/^\\//g' | sed 's/\\/:\\/')"
            fi
        ;;
    esac
}

function _getlinux()
{
    case $1 in
        t430)
            scp huangmianbo@t430:/tmp/$2 ./
        ;;
        vb | gitlab)
            scp huangmianbo@virtualbox:$2 ./
        ;;
        vm | vmware)
            scp huangmianbo@vmware:$2 ./
        ;;
        *)
            scp root@cbpos:/tmp/$2 ./
        ;;
    esac
}

function _git-branch-prompt 
{
    
    local branch=$(git symbolic-ref --short -q HEAD 2>/dev/null)
    test -n "$branch" &&  printf " [%s]" $branch
}


function _gvim()
{
    gvim --remote-silent $* > /dev/null &
}

function _ifconfig()
{
    adapter_array=("")
    adapter_list=`ipconfig /all | grep "Description" | cut -d: -f 2 | sed 's/^ //g'`
    adapter_id=`netsh interface show interface | sed -n '4,$p' | awk '{$1="";$2="";$3="";print $0}' | sed 's/^   //g'`

    OLD_IFS="$IFS"
    IFS=$'\r\n'
    let i=1
    for adapter in $adapter_id
    do
        test -z "$adapter" && continue
        echo $i: $adapter
        adapter_array[$i]=$adapter
        let i=$i+1
    done
    IFS=$OLD_IFS

    test -z "$1" && { echo "$adapter_list"  | cat -n; }

    test "$1" == "-a" && { ipconfig /all && return 0; }
    
    test -n "$1" && { 
        case $1 in 
            [0-9]*)
            case $2 in 
                up)
                  adapter=${adapter_array[$1]}
                  print_infor "turn up adapter:$adapter"
                  print_infor "netsh interface set interface $adapter enabled"
                  netsh interface set interface "$adapter" enabled
                ;;
                down)
                  adapter=${adapter_array[$1]}
                  print_infor "turn down adapter:$adapter"
                  print_warning "netsh interface set interface $adapter disabled"
                  netsh interface set interface "$adapter" disabled
                ;;
            esac
            ;;
            ${adapter_array[1]})
                ipconfig /all | grep "${adapter_array[1]}" -A 20
            ;;
            *)
                print_error "please input adapter id #"
            ;;
        esac
        return 0;
    }
}

function _login_machine()
{
    case $1 in
        debian | 3)
            ssh huangmianbo@192.168.56.118
        ;;
        gitlab)
            ssh huangmianbo@192.168.56.103
        ;;
        googol)
            ssh googol@cbpos
        ;;
        gigabyte)
            ssh mianb@192.168.1.102
        ;;
        mac)
            ssh huangmianbo@192.168.1.103
        ;;
        t430)
            ssh -Y huangmianbo@192.168.1.105
        ;;
        t580)
            ssh mianb@Huangs-T580
        ;;
        vm)
            ssh huangmianbo@vmware
        ;;
        server)
            ssh huangmianbo@192.168.212.30
        ;;
        beaglebone)
            case $2 in 
            1 | usb)
                ssh root@192.168.7.2
            ;;
            2 | eth0 )
                ssh root@192.168.1.110
            ;;
            *)
                ssh root@192.168.7.2 ||  \
                { \
                    ssh root@192.168.7.2 2>&1 | grep -i "host key verification failed" &> /dev/null && \
                    pushd ~/.ssh &> /dev/null && \
                    line=$(cat known_hosts | egrep -n '^192.168.7.2' | cut -d: -f1) && \
                    sed -i "${line}d" known_hosts && \
                    popd &> /dev/null && \
                    ssh root@192.168.7.2 \
                ;}
            ;;
            rasp4)
                ssh pi@192.168.1.106
            ;;
            esac
        ;;
        cbpos)
            # TRY TO PING 192.168.0.2
            local server=192.168.0.2
            test -n "$2" && server=192.168.0.$2
            for ((i=1;i<100;i++))
            do
                print_infor "$i try to ping $server ..."
                ping -c 1 -W 1 $server &> /dev/null && break
                sleep 1
            done
            print_infor "login $server ..."
            ssh root@$server
            test $? != 0 &&  return 1
        ;;
    esac
}

function _md2pdf()
{
    file=$1
    pdffile=${file/.md/.pdf}

    if [ ! -f "$file" ];then
        print_error "there is no such file $1"
        return -1
    fi

    pandoc --pdf-engine=pdflatex $file -o $pdffile
}

function _netstat()
{
    test $# -eq 0 && \netstat -ano
    test $# -eq 0 || \netstat $*
}

function _poweroff()
{
    win_poweroff_cmd="shutdown /p /f"
    linux_poweroff_cmd="sudo poweroff"

    case $1 in 
        1 | gigabyte)
            echo "--------------------------------------------------"
            echo " Machine 1: gigabyte-brix win10"
            echo "--------------------------------------------------"
            print_infor "try to poweroff gigabyte ..."
            { print_infor "ping 192.168.1.102 ..." && ping -c 1 -W 1 192.168.1.102 &> /dev/null && ssh mianb@192.168.1.102 $win_poweroff_cmd; } || \
            { print_infor "ping gigabyte-brix ..." && ping -c 1 -W 1 gigabyte-brix &> /dev/null && ssh mianb@gigabyte-brix $win_poweroff_cmd; }
        ;;
        2 | t430)
            echo "--------------------------------------------------"
            echo " Machine 2: Ubuntu Linux T430"
            echo "--------------------------------------------------"
            print_infor "try to poweroff t430 ..."
            { print_infor "ping 192.168.1.105" && ping -c 1 -W 1 192.168.1.105 &> /dev/null && ssh huangmianbo@192.168.1.105 $linux_poweroff_cmd; }
        ;;
        3 | mac)
            echo "--------------------------------------------------"
            echo " Machine 3: Mac OSx"
            echo "--------------------------------------------------"
            print_infor "try to poweroff mac ..."
            { print_infor "ping 192.168.1.103" && ping -c 1 -W 1 192.168.1.103 &> /dev/null && ssh huangmianbo@192.168.1.103 "sudo shutdown -h now"; }
        ;;
        4 | cbpos)
            echo "--------------------------------------------------"
            echo " Machine 4: IdeaBox Pro Ubuntu 14.04 "
            echo "--------------------------------------------------"
            print_infor "try to poweroff ideabox ..."
            { print_infor "ping 192.168.0.2" && ping -c 1 -W 1 192.168.0.2 &> /dev/null && ssh root@192.168.0.2 $linux_poweroff_cmd; } || \
            { print_infor "ping cbpos ..." && ping -c 1 -W 1 cbpos &> /dev/null && ssh root@cbpos "sudo poweroff"; } 
        ;;
        5 | vm)
            echo "--------------------------------------------------"
            echo " Machine 5: Vmware Ubuntu 14.04"
            echo "--------------------------------------------------"
            _stop vm
        ;;
        6 | vb)
            echo "--------------------------------------------------"
            echo " Machine 6: VirtualBox Gitlab Machine"
            echo "--------------------------------------------------"
            _stop vb
        ;;
        7 | beaglebone)
            echo "--------------------------------------------------"
            echo " Machine 7: Beaglebone"
            echo "--------------------------------------------------"
            print_infor "try to poweroff beaglebone  ..."
            { print_infor "ping beaglebone" && ping -c 1 -W 1 beaglebone &> /dev/null && ssh root@beaglebone $linux_poweroff_cmd; }
        ;;
        all)
            for ((i=1;i<=$(type _poweroff | egrep ")$" | egrep "\s[0-9].*\|" | wc -l);i++))
            do
                _poweroff $i
            done
        ;;
        *)
            read -p "shutdown computer $HOSTNAME? (y/n): " input
            test "$input" == "y" && shutdown /p /f
            test "$input" == "y" || print_warning "user abort poweroff computer"
        ;;
    esac
}

function _ps()
{
    test $# -eq 0 && { \ps && tasklist; }
}

function _putty()
{
    case $1 in 
        *)
            \putty -load COM2 &
        ;;
    esac
}

function _rand()
{
    test "$1" == "" && echo $RANDOM && return 0
    test "$2" == "" && echo $RANDOM && return 0
    let min=$1
    let max=$(($2-$min+1))
    num=$(cat /dev/urandom | head -n 10 | cksum | awk -F ' ' '{print $1}');
    echo $(($num%$max+$min))
}

function _randword()
{
    test $(uname) == "Linux" && word_list=~/documents/18-bash-utils/00_en_dictionary_huge.dic
    test -n "$(uname | grep -i "cygwin")" && word_list=$dir/d/documents/18-bash-utils/00_en_dictionary_huge.dic

    test -f $word_list || { print_error "could not find file $word_list" && return 1; }
    let word_size=$(cat $word_list | grep "^[A-Z]" | wc -l)
    let line=$(uuidgen | cksum | cut -c 1-6)%$word_size
    cat $word_list | grep "^[A-Z]" | sed -n "$line p"
}

function _reset_known_host()
{
    pushd . > /dev/null
    cd ~/.ssh

    check=`cat known_hosts | egrep -n "^192.168.0.2"`
    if [ ! -z "$check" ];then
        line=`echo $check | cut -f1 -d:`
        print_infor "remove line at $line in file ~/.ssh/known_hosts"
        sed -i "$line d" known_hosts
    fi

    check=`cat known_hosts | egrep -n "^192.168.0.3"`
    if [ ! -z "$check" ];then
        line=`echo $check | cut -f1 -d:`
        print_infor "remove line at $line in file ~/.ssh/known_hosts"
        sed -i "$line d" known_hosts
    fi

    popd > /dev/null
}

function _start()
{
    if [ $# -lt 1 ];then
        print_error "please specify which virtual machine to start"
        return 1
    fi

    case $1 in
        1 | vm | ubuntu1404)
            export vm_start=true
            check=`vmrun list | grep "Ubuntu-14.04-Kylin"` 
            if [ ! -z "$check" ];then
                echo ""
                echo "vmware machine is already starting"
                return 0
            fi
            echo start vmware machine ... 
            vmrun start "D:\\Vmware-Machines\\Ubuntu-14.04-Kylin\\\Ubuntu.vmx"  nogui 2>&1 > /dev/null &
        ;;
        2 | vb | ubuntu1804)
            # LIST ALL VB MACHINE
            vb_machines=`vboxmanage list vms | awk -d\" '{print $1}' | sed 's/"//g'`
            # PUSH MACHINE NAME INTO ARRAY BUFFER
            let vb_machine_id=1
            for vb_machine in $vb_machines 
            do
                echo $vb_machine_id $vb_machine 
                machines_array[$vb_machine_id]=$vb_machine
                let vb_machine_id=$vb_machine_id+1
            done
            let vb_machine_id=$vb_machine_id-1
            test "$2" == "i" && read -p "please select which id to start 1-$vb_machine_id: " vb_machine_id
            # START THE SELECTED MACHINE 
            test "$2" == "i" && ( \
            (print_infor "start virtualbox machine ${machines_array[$vb_machine_id]} ...") &&  \
            (VBoxManage list runningvms | grep "${machines_array[$vb_machine_id]}")  || \
            (VBoxManage startvm ${machines_array[$vb_machine_id]} --type headless 2>&1 > /dev/null &) &&  \
            return 0 )
            # START THE DEFAULT VB MACHINE
            check=`VBoxManage list runningvms | grep "Ubuntu-1804"` 
            if [ ! -z "$check" ];then
                print_warning "virtualbox machine is already starting"
                return 1
            fi
            print_infor "start default virtual box machine \"Ubuntu-1804\" ... "
            VBoxManage startvm "Ubuntu-1804" --type headless 2>&1 > /dev/null &
        ;;
        3 | rsync | sync)
            _sudo net start rsyncserver
        ;;
        list)
            echo list running virtual machines ...
            echo vmware:
            vmrun list | cat -n
            echo
            echo virtualbox:
            VBoxManage list runningvms | cat -n
        ;;
        *)
            print_error "error,unknown machine or service"
            print_infor "start |vb|vm|rsync|"
        ;;
    esac
}

function _stop()
{
    if [ $# -lt 1 ];then
        print_error "please specify which virtual machine to start"
        return 1
    fi

    case $1 in
        vm | ubuntu1404)
            echo stop vmware machine ...  
            vmrun stop "D:\\Vmware-Machines\\Ubuntu-14.04-Kylin\\\Ubuntu.vmx" nogui
            test $? -eq 0 && export vm_start=false
        ;;
        vb | ubuntu1804)
            echo stop virtual box machine ... 
            VBoxManage controlvm "Ubuntu-1804" poweroff
        ;;
        rsync | sync)
            _sudo net stop rsyncserver
        ;;
        *)
            print_error "unknown virtual machine" 
        ;;
    esac
}

function _sudo()
{
    runas /user:administrator /savecred "$*"  
}

function _sync()
{
    case $1 in 
        1 | book1)
            ping -c 1 -W 1 192.168.1.102 &> /dev/null || return 1
            rsync -vzrt --progress --include=*.pdf --exclude=*.* \
            gigabyte-brix::book-linux \
            "/cygdrive/d/Book/Linux/"  \
            --port=10556
        ;;
        2 | book2)
            ping -c 1 -W 1 192.168.1.102 &> /dev/null || return 1
            rsync -vzrt --progress --include=*.pdf --exclude=*.* \
            gigabyte-brix::book-cs \
            "/cygdrive/d/Book/Computer-Science-CS/"  \
            --port=10556
        ;;
        3 | git)
            ping -c 1 -W 1 192.168.212.30 &> /dev/null || return 1
            rsync -vzrt --progress --delete -e ssh \
            "huangmianbo@192.168.212.30:/home/huangmianbo/git/" \
            "/cygdrive/d/backup/git/"  \
        ;;
        all)
            _sync 1
            _sync 2
            _sync 3
        ;;
        *)
            print_infor "mysync 1:book1|2:book2|3:git|4:gitlab"
        ;;
    esac
}

function _set_alias()
{
    alias ....='cd ../../../'
    alias ...='cd ../../'
    alias ..='cd ../'
    alias ball='_backup_all'
    alias bbash='_backup_bash'
    alias bcomp='_bcomp'
    alias bconfig='_backup_config'
    alias bdoc='_backup_doc'
    alias beaglebone='_login_machine beaglebone'
    alias burn='_burn'
    alias btask='_backup_task'
    alias cbpos='_login_machine cbpos'
    alias cgdb='cgdb -q'
    alias config='gvim --remote-silent D:\\cygwin64\\home\\mianb\\.bash_profile &'
    alias debian='_login_machine debian'
    alias diff='colordiff --exclude=*.git*'
    alias dmidecode='systeminfo'
    alias cplinux='_cplinux ideabox'
    alias cpt430='_cplinux t430'
    alias cpserver='_cplinux server'
    alias cpdebian='_cplinux debian'
    alias cpmac='_cplinux mac'
    alias cpvb='_cplinux gitlab'
    alias cpvm='_cplinux vm'
    alias cmd='_sudo conemu64'
    alias dmesg='_dmesg'
    alias doc='pushd . > /dev/null && cd ~/documents/RTAI'
    alias eclipse='/d/Profinet/DevKit46/eclipse/eclipse &'
    alias expl='_expl'
    alias fpga_version='ssh root@192.168.0.2 \"fpga_version\"'
    alias fv='fpga_version'
    alias gdb='gdb -q'
    alias getlinux='_getlinux cbpos'
    alias gett430='_getlinux t430'
    alias getvb='_getlinux vb'
    alias getvm='_getlinux vm'
    alias gigabyte='_login_machine gigabyte'
    alias gitlab='_login_machine gitlab'
    alias googol='_login_machine googol'
    alias gp='gnuplot'
    alias grep='grep --color=auto --exclude-dir=.git --exclude=*.o --exclude=*.d --exclude=*.map --exclude=*.bin'
    alias ifconfig='_ifconfig'
    alias iperf2s='iperf -u -s -m -i 1'
    alias iso='_login_machine iso'
    alias ls='ls --color=auto'
    alias lshw='systeminfo'
    alias lscpu='wmic cpu list brief'
    alias mac='_login_machine mac'
    alias md2pdf='_md2pdf'
    alias mydate='date +%Y%m%d%H%M%S'
    alias myffmpeg='/d/documents/18-bash-utils/20_ffmpeg_utils.sh'
    alias mygit='/d/documents/18-bash-utils/25_git_utils.sh'
    alias mysync='_sync'
    alias mv='mv -iv'
    alias netstat='_netstat'
    alias pdf='SumatraPDF'
    alias poweroff='_poweroff'
    alias ps='_ps'
    alias putty='_putty'
    alias pycharm='pycharm64 &> /dev/null &'
    alias qt='qtcreator &> /dev/null &'
    alias randword='_randword'
    alias rand='_rand'
    alias rasp4='ssh pi@192.168.1.106'
    alias reload='source ~/.bash_profile'
    alias rename='/d/documents/18-bash-utils/01_rename_utils.sh'
    alias rkh='_reset_known_host'
    alias rm='rm -iv'
    alias rtai='cd ~/documents/RTAI'
    alias start='_start'
    alias stop='_stop'
    alias sudo='_sudo'
    alias svn='svn --username huang.mb --password huang.mb'
    alias server='_login_machine server'
    alias t430='_login_machine t430'
    alias t580='_login_machine t580'
    alias t='_tmux_new'
    alias timeout='timeout --preserve-status'
    alias tl='_task_list'
    alias tia='runas /user:administrator /savecred "d:\Siemens\Automation\Portal V14/Bin\Siemens.Automation.Portal.exe"'
    alias tmp='cd ~/tmp'
    alias uall='_update_all'
    alias uuid='uuidgen -r | cut -c 1-8'
    alias vim='_gvim'
    alias vivado='vivado -mode tcl'
    alias vlc='_vlc'
    alias vm='_login_machine vm'
    alias vmware='vm'
    alias vscode='_code'
    alias vsco='vscode'
    alias ~='cd ~'
}

function _set_path()
{
    export PATH=$dir/d/Vim/vim81:$PATH
    export PATH=$dir/d/Git/bin:$PATH
    export PATH=$dir/d/texlive/2018/bin/win32:$PATH
    export PATH=$dir/d/SumatraPDF:$PATH
    export PATH=$dir/d/pandoc:$PATH
    export PATH=$dir/d/VLC:$PATH
    export PATH=$dir/d/PUTTY:$PATH
    export PATH=$dir/d/Beyond\ Compare\ 3:$PATH
    export PATH=$dir/c/Program\ Files\ \(x86\)/Google/Chrome/Application:$PATH
    export PATH=$dir/d/VMware/VMware\ Workstation:$PATH
    export PATH=$dir/d/Oracle/VirtualBox:$PATH
    export PATH=$dir/d/TortoiseSVN/bin:$PATH
    export PATH=$dir/d/Typora/bin:$PATH
    export PATH=$dir/d/Qt/Qt5.13.2/Tools/QtCreator/bin:$PATH
    export PATH=$dir/d/JetBrains/PyCharm\ Community\ Edition\ 2019.3/bin:$PATH
    export PATH=$dir/d/Microsoft\ VS\ Code:$PATH
    export PATH=$dir/d/gnuplot/bin:$PATH
    export PATH=$dir/d/Xilinx/Vivado/2019.2/bin/unwrapped/win64.o:$PATH
    export PATH=$dir/d/Xilinx/Vivado/2019.2/bin/:$PATH
    export PATH=$dir/d/Wireshark:$PATH
    export PATH=$dir/d/ffmpeg/bin:$PATH
    export PATH=$dir/d/SEGGER/JLink:$PATH
    export PATH=$dir/d/ConEmu:$PATH

    if [ "$SHELL" == "/bin/bash" ];then
        export PATH=$dir/d/cygwin64/bin:$PATH
    fi
}

function _set_PS1()
{
    PS1="\u@\h \[\033[0;36m\]\W\[\033[0m\]\[\033[0;32m\]\$(_git-branch-prompt)\[\033[0m\] \$ "
}

function _set_lang()
{
     export LANG=en_US.UTF-8
     export LANGUAGE=en_US.utf8
     export LC_CTYPE="en_US.utf8"
     export LC_NUMERIC="en_US.utf8"
     export LC_TIME="en_US.utf8"
     export LC_COLLATE="en_US.utf8"
     export LC_MONETARY="en_US.utf8"
     export LC_MESSAGES="en_US.utf8"
     export LC_PAPER="en_US.utf8"
     export LC_NAME="en_US.utf8"
     export LC_ADDRESS="en_US.utf8"
     export LC_TELEPHONE="en_US.utf8"
     export LC_MEASUREMENT="en_US.utf8"
     export LC_IDENTIFICATION="en_US.utf8"
     export LC_ALL=en_US.utf8
}

function _task_list()
{
    case $1 in 
        1)
            task list proj:RTAI
            return 0
        ;;
        2)
            task list proj:infra
            return 0
        ;;
        3)
            task list proj:fpga
            task list proj:FPGA
            return 0
        ;;
        a)
            task list
            return 0
        ;;
        *)
            task list
            return 0
        ;;
    esac
}

function _tmux_new()
{
    let tmux_cnt=`tmux list-sessions 2>&1 | grep -v "no server running" | grep ":" | wc -l`
    let tmux_cnt=$tmux_cnt+1

    case $1 in 
        1)
        tmux new -s session-$tmux_cnt -n cygwin
        ;;
        *)
        tmux new-session -d -s session-$tmux_cnt  -n cygwin
        tmux new-window -d -n vmware-1
        tmux new-window -d -n vmware-2
        tmux new-window -d -n cbpos-1
        tmux new-window -d -n cbpos-2
        timeout --preserve-status 1s ping -c 1 -W 1 192.168.212.30 &> /dev/null  && tmux new-window -d -n server 
        timeout --preserve-status 1s ping -c 1 -W 1 192.168.1.105  &> /dev/null  && tmux new-window -d -n t430 
        timeout --preserve-status 1s ping -c 1 -W 1 192.168.1.103  &> /dev/null  && tmux new-window -d  -n MacOS 
        # timeout --preserve-status 1s ping -c 1 -W 1 beaglebone     &> /dev/null  && tmux new-window -d  -n beaglebone 
        tmux attach-session -d -t session-$tmux_cnt
        ;;
    esac
}

function _update_all()
{
    pushd . > /dev/null

    echo
    echo -------------------------------------------------
    echo 1, update $dir/d/documents/10-github-documents 
    echo -------------------------------------------------
    echo 

    cd $dir/d/documents/10-github-documents
    git pull

    echo
    echo -------------------------------------------------
    echo 2, $dir/d/documents/11-configs-from-github
    echo -------------------------------------------------
    echo

    cd $dir/d/documents/11-configs-from-github
    git pull

    echo
    echo -------------------------------------------------
    echo 3,$dir/d/documents/09-latex-tikz-demo
    echo -------------------------------------------------
    echo

    cd $dir/d/documents/09-latex-tikz-demo
    git pull

    popd
}

function _vlc()
{
    vlc $1 &> /dev/null &
}

# ------------------------------------------------------------------- #
# Customer Main Entry
# ------------------------------------------------------------------- #
function main ()
{
    _export_var
    _set_path
    _set_alias
    _set_lang
    _set_PS1

    set -o vi

    if [ "$SHELL" == "/bin/bash" ];then
        task list
    fi

    _duty all & 

}

main $* 
