# To the extent possible under law, the author(s) have dedicated all 
# copyright and related and neighboring rights to this software to the 
# public domain worldwide. This software is distributed without any warranty. 
# You should have received a copy of the CC0 Public Domain Dedication along 
# with this software. 
# If not, see <http://creativecommons.org/publicdomain/zero/1.0/>. 

# base-files version 4.3-2

# ~/.bash_profile: executed by bash(1) for login shells.

# The latest version as installed by the Cygwin Setup program can
# always be found at /etc/defaults/etc/skel/.bash_profile

# Modifying /etc/skel/.bash_profile directly will prevent
# setup from updating it.

# The copy in your home directory (~/.bash_profile) is yours, please
# feel free to customise it to create a shell
# environment to your liking.  If you feel a change
# would be benifitial to all, please feel free to send
# a patch to the cygwin mailing list.

# User dependent .bash_profile file

# source the users bashrc if it exists
if [ -f "${HOME}/.bashrc" ] ; then
  source "${HOME}/.bashrc"
fi

# Set PATH so it includes user's private bin if it exists
# if [ -d "${HOME}/bin" ] ; then
#   PATH="${HOME}/bin:${PATH}"
# fi

# Set MANPATH so it includes users' private man if it exists
# if [ -d "${HOME}/man" ]; then
#   MANPATH="${HOME}/man:${MANPATH}"
# fi

# Set INFOPATH so it includes users' private info if it exists
# if [ -d "${HOME}/info" ]; then
#   INFOPATH="${HOME}/info:${INFOPATH}"
# fi

######################################################################
# User Defined Setting # 
######################################################################
export TERM=xterm-256color
export OUTPUT_CHARSET="cp936"
if [ "$SHELL" == "/bin/bash" ];then
    export dir=/cygdrive
else
    export dir=
fi

function _cplinux()
{
    scp $1 root@cbpos:~/tmp/
    if [ "$?" != 0 ];then
        scp $1 root@192.168.0.2:~/tmp/
    fi
}

function _getlinux()
{
    scp root@cbpos:$1 ./
}

function _md2pdf()
{
    file=$1
    pdffile=${file/.md/.pdf}

    if [ ! -f "$file" ];then
        echo "error: there is no such file $1"
        return -1
    fi

    pandoc --pdf-engine=pdflatex $file -o $pdffile
}

function _cpvm()
{
    if [ ! -f "$1" ];then
        echo "file $1 does not exist !!"
        return -1
    fi
    scp $1 huangmianbo@vmware:~/tmp/
}

function _getvm()
{
    scp huangmianbo@vmware:$1 ./
}

function _cpvb()
{
    if [ ! -f "$1" ];then
        echo "file $1 does not exist !!"
        return -1
    fi
    scp $1 huangmianbo@virtualbox:~/tmp/
}

function _cbpos()
{
    case $1 in
    1)
        ping -c 1 cpbos > /dev/null
        if [ "$?" == "0" ];then
            echo login cbpos ...
            ssh root@cbpos
            return 0
        fi
    ;;
    2)
        ping -c 1 -W 1 192.168.50.213 > /dev/null
        if [ "$?" == "0" ];then
            echo login 192.168.50.213 ...
            ssh root@192.168.50.213
            return 0
        fi
    ;;
    3)
        ping -c 1 -W 1 192.168.0.3 > /dev/null
        if [ "$?" == "0" ];then
            echo login 192.168.0.3 ...
            ssh root@192.168.0.3
            return 0
        else
            echo "error,could not ping cbpos!!"
        fi
    ;;
    *)
        let cnt=1
        ping -c 1 -W 1 192.168.0.2 > /dev/null
        check=$?
        while [ "$check" != "0" ]; do
            echo "$cnt try to ping 192.168.0.2 ..."
            ping -c 1 -W 1 192.168.0.2 > /dev/null
            check=$?
            if [ "$check" == "0" ];then
                break
            else
                let cnt=$cnt+1
                sleep 1
                if [ $cnt == 101 ];then
                    echo "error: could not ping 192.168.0.2"
                    return 1
                fi
            fi
        done
        echo login 192.168.0.2 ...
        ssh root@192.168.0.2 
        if [ $? != 0 ];then
            return 1
        fi
    ;;
    
    esac
}

function _reset_known_host()
{
    pushd . > /dev/null
    cd ~/.ssh

    check=`cat known_hosts | egrep -n "^192.168.0.2"`
    if [ ! -z "$check" ];then
        line=`echo $check | cut -f1 -d:`
        echo "remove line at $line in file ~/.ssh/known_hosts"
        sed -i "$line d" known_hosts
    fi

    check=`cat known_hosts | egrep -n "^192.168.0.3"`
    if [ ! -z "$check" ];then
        line=`echo $check | cut -f1 -d:`
        echo "remove line at $line in file ~/.ssh/known_hosts"
        sed -i "$line d" known_hosts
    fi

    popd > /dev/null
}

function _getvb()
{
    scp huangmianbo@virtualbox:$1 ./
}

function _gvim()
{
    gvim $* > /dev/null &
}

function _vlc()
{
    vlc $1 &> /dev/null &
}

function _code()
{
    code $1 &> /dev/null &
}

function _backup_doc()
{
    pushd . > /dev/null
    cd  $dir/d/documents/RTAI

    flag=0
    comment=""

    check=`git diff 00-rtai-x86-ubuntu-1404.md | wc -c`
    if [ "$check" != "0" ];then
        echo git add 00-rtai-x86-ubuntu-1404.md ...
        git add 00-rtai-x86-ubuntu-1404.md
        flag=1
        comment=$comment" 00-rtai-x86-ubuntu-1404.md"
    fi

    check=`git diff Makefile | wc -c`
    if [ "$check" != "0" ];then
        echo git add Makefile ...
        git add Makefile
        flag=1
        comment=$comment" Makefile"
    fi

    check=`git diff .gitignore | wc -c`
    if [ "$check" != "0" ];then
        echo git add .gitignore ...
        git add .gitignore
        flag=1
        comment=$comment" .gitignore"
    fi

    if [ "$flag" == "1" ];then
        echo commit change to local  ...
        git  commit -m "update $comment from $USER@$HOSTNAME"
        echo 
        git push -u local master

        echo
        echo update to common folder ...

        pushd . > /dev/null
        cd $dir/d/documents/10-github-documents/ 
        ./update_documents_from_local.sh 
        popd > /dev/null

    else
        echo "no update ,nothing to backup"
    fi

    popd > /dev/null
}

function _backup_task()
{
    pushd .  > /dev/null
    flag=0
    
    cd ~
    check=`git diff .taskrc | wc -c`
    if [ "$check" != "0" ];then
        echo git add .taskrc ...
        git add .taskrc
        flag=1
    fi

    check=`git diff .task | wc -c`
    if [ "$check" != "0" ];then
        echo git add .task ...
        git add .task
        flag=1
    fi

    if [ "$flag" == "1" ];then
        echo commit change to local 
        git  commit -m "update taskwarrior from $USER@$HOSTNAME"
        git push -u $(git remote | sed -n 1p) master
    else
        echo "no update ,nothing to backup"
    fi
    
    popd > /dev/null
}

function _backup_bash()
{
    pushd .  &> /dev/null
    flag=0
    
    cd ~
    check=`git diff .bash_profile | wc -c`
    if [ "$check" != "0" ];then
        echo git add .bash_profile ...
        git add .bash_profile
        flag=1
    fi

    if [ "$flag" == "1" ];then
        echo commit change to local 
        git  commit -m "update .bash_profile from $USER@$HOSTNAME"
        git push -u $(git remote | sed -n 1p) master

        echo update to common config folders ...
        echo
        pushd . > /dev/null
        cd $dir/d/documents/11-configs-from-github/
        ./update_config_file.sh
        popd > /dev/null
    else
        echo "no update ,nothing to backup"
    fi

    
    popd &> /dev/null
}

function _backup_config()
{
    pushd . &> /dev/null

    cd $dir/d/documents/11-configs-from-github

    ./update_config_file.sh

    files=`git status | grep modified | awk -F: '{print $2}'`

    if [ -z "$files" ];then
        echo no file need to git add 
        popd > /dev/null
        return 0
    fi

    for file in $files
    do
        echo git add $file ...
        git add $file
    done

    echo "git commit -m \"udpate config file from $USER @ $HOSTNAME \" ..."
    git commit -m "udpate config file from $USER @ $HOSTNAME "

    git push -u origin master

    echo 
    echo ---------------------------------------------------------
    echo Now,Git Backup Config File In $home
    echo ---------------------------------------------------------
    cd ~
    comment=""

    files=`git status | grep modified | awk -F: '{print $2}'`
    files=`echo $files | grep ".bash_profile \| .tmux.conf \| .taskrc \| .task"`
    if [ -z "$files" ];then
        echo no file in $HOME need to git add 
        popd > /dev/null
        return 0
    fi
    echo
    for file in $files
    do
        echo git add $file ...
        git add $file
    done
    echo "git commit -m \"update files $comment from $USER @ $HOSTNAME\""
    git commit -m "update files $comment from $USER @ $HOSTNAME"
    git push -u $(git remote | sed -n 1p) master
    echo


    popd &> /dev/null
}

function _backup_all()
{
    echo "--------------------------------------"
    echo "1, backup doc ..."
    echo "--------------------------------------"
    echo 
    _backup_doc

    echo "--------------------------------------"
    echo "2, backup bash profile ..."
    echo "--------------------------------------"
    echo 
    _backup_bash

    echo "--------------------------------------"
    echo "3, backup taskwarrior ..."
    echo "--------------------------------------"
    echo 
    _backup_task

    echo "--------------------------------------"
    echo "4, backup config file to github ..."
    echo "--------------------------------------"
    echo 
    _backup_config

}

function _tmux_new()
{
    let tmux_cnt=`tmux list-sessions 2>&1 | grep -v "no server running" | grep ":" | wc -l`
    let tmux_cnt=$tmux_cnt+1

    case $1 in 
        1)
        tmux new -s session-$tmux_cnt -n cygwin
        ;;
        *)
        tmux new-session -d -s session-$tmux_cnt  -n cygwin
        tmux new-window -d -n vmware
        tmux new-window -d -n cbpos
        tmux attach-session -d -t session-$tmux_cnt
        ;;
    esac

}

function _done_102()
{
    the_date=`date +%Y%m%d`
    pushd . &> /dev/null
    cd  $dir/d/102-delivery/

    mkdir -p done_$the_date

    for file in *
    do
        if [ -f "$file" ];then
            mv "$file" done_$the_date
        fi
    done

    popd  &> /dev/null
}

function _start()
{
    if [ $# -lt 1 ];then
        echo "error: please specify which virtual machine to start"
        return 1
    fi

    case $1 in
        vm)
            check=`vmrun list | grep "Ubuntu-14.04-Kylin"` 
            if [ ! -z "$check" ];then
                echo ""
                echo "vmware machine is already starting"
                return 0
            fi
            echo start vmware machine ... 
            vmrun start "D:\\Virtual Machines\\Ubuntu-14.04-Kylin\\\Ubuntu.vmx"  nogui
        ;;
        vb)
            check=`VBoxManage list runningvms | grep "Ubuntu-1804"` 
            if [ ! -z "$check" ];then
                echo ""
                echo "virtualbox machine is already starting"
                return 0
            fi
            echo start virtual box machine ... 
            VBoxManage startvm "Ubuntu-1804" --type headless
        ;;
        list)
            echo list virtual machines ...
            echo vmware:
            vmrun list
            echo
            echo virtualbox:
            VBoxManage list runningvms
        ;;
        *)
            echo error,unknown virtual machine
        ;;
    esac
    
}

function _stop()
{
    if [ $# -lt 1 ];then
        echo "error: please specify which virtual machine to start"
        return 1
    fi

    case $1 in
        vm)
            echo stop vmware machine ...  
            vmrun stop "D:\\Virtual Machines\\Ubuntu-14.04-Kylin\\\Ubuntu.vmx" nogui
            VM_START=0
        ;;
        vb)
            echo stop virtual box machine ... 
            VBoxManage controlvm "Ubuntu-1804" poweroff
            VB_START=0
        ;;
        *)
            echo error,unknown virtual machine
        ;;
    esac
    
}

function _mydate()
{
    date +%Y%m%d%H%M%S
}


function _task_list()
{
    if [ -z "$1" ];then
        task list proj:RTAI
        return 0
    fi

    if [ "$1" == "2" ];then
        task list proj:infra
        return 0
    fi

    if [ "$1" == "a" ];then
        task list
        return 0
    fi
    
}

function _update_all()
{
    pushd . > /dev/null

    echo
    echo -------------------------------------------------
    echo 1, update $dir/d/documents/10-github-documents 
    echo -------------------------------------------------
    echo 

    cd $dir/d/documents/10-github-documents
    git pull

    echo
    echo -------------------------------------------------
    echo 2, $dir/d/documents/11-configs-from-github
    echo -------------------------------------------------
    echo

    cd $dir/d/documents/11-configs-from-github
    git pull

    echo
    echo -------------------------------------------------
    echo 3,$dir/d/documents/09-latex-tikz-demo
    echo -------------------------------------------------
    echo

    cd $dir/d/documents/09-latex-tikz-demo
    git pull

    popd
}

function set_alias()
{
    alias ....='cd ../../../'
    alias ...='cd ../../'
    alias ..='cd ../'
    alias ball='_backup_all'
    alias bbash='_backup_bash'
    alias bcomp='BCompare'
    alias bconfig='_backup_config'
    alias bdoc='_backup_doc'
    alias btask='_backup_task'
    alias cbpos='_cbpos'
    alias cgdb='cgdb -q'
    alias config='gvim --remote-silent D:\\cygwin64\\home\\mianb\\\.bash_profile &'
    alias cplinux='_cplinux'
    alias cpvb='_cpvb'
    alias cpvm='_cpvm'
    alias doc='pushd . > /dev/null && cd ~/documents/RTAI'
    alias expl='explorer'
    alias gdb='gdb -q'
    alias getlinux='_getlinux'
    alias getvb='_getvb'
    alias getvm='_getvm'
    alias gigabyte='ssh mianb@gigabyte-brix'
    alias gitlab='ssh huangmianbo@192.168.56.103'
    alias googol='ssh googol@cbpos'
    alias gp='gnuplot'
    alias grep='grep --color=auto'
    alias iperf2s='iperf -u -s -m -i 1'
    alias linux='ssh googole@192.168.0.2'
    alias linux='ssh googole@cbpos'
    alias ls='ls --color=auto'
    alias mac='ssh huangmianbo@Huangs-MBP'
    alias md2pdf='_md2pdf'
    alias mydate='_mydate'
    alias pdf='SumatraPDF'
    alias pycharm='pycharm64 &> /dev/null &'
    alias qt='qtcreator &> /dev/null &'
    alias reload='source ~/.bash_profile'
    alias rkh='_reset_known_host'
    alias rm='rm -iv'
    alias rtai='cd ~/documents/RTAI'
    alias src='cd $dir/d/Source'
    alias start='_start'
    alias stop='_stop'
    alias svn='svn --username huang.mb --password huang.mb'
    alias t430='ssh huangmianbo@ThinkPad-T430'
    alias t580='ssh mianb@Huangs-T580'
    alias t='_tmux_new'
    alias tl='_task_list'
    alias tmp='cd ~/tmp'
    alias uall='_update_all'
    alias vb='ssh huangmianbo@virtualbox'
    alias vim='_gvim'
    alias vlc='_vlc'
    alias vm='ssh huangmianbo@vmware'
    alias vmware='vm'
    alias vscode='_code'
    alias vsco='vscode'
    alias ~='cd ~'
}

function set_path()
{
    export PATH=$dir/d/Vim/vim81:$PATH
    export PATH=$dir/d/Git/bin:$PATH
    export PATH=$dir/d/texlive/2018/bin/win32:$PATH
    export PATH=$dir/d/SumatraPDF:$PATH
    export PATH=$dir/d/pandoc:$PATH
    export PATH=$dir/d/VLC:$PATH
    export PATH=$dir/d/PUTTY:$PATH
    export PATH=$dir/d/Beyond\ Compare\ 3:$PATH
    export PATH=$dir/c/Program\ Files\ \(x86\)/Google/Chrome/Application:$PATH
    export PATH=$dir/d/VMware/VMware\ Workstation:$PATH
    export PATH=$dir/d/Oracle/VirtualBox:$PATH
    export PATH=$dir/d/TortoiseSVN/bin:$PATH
    export PATH=$dir/d/Typora/bin:$PATH
    export PATH=$dir/d/Qt/Qt5.13.2/Tools/QtCreator/bin:$PATH
    export PATH=$dir/d/JetBrains/PyCharm\ Community\ Edition\ 2019.3/bin:$PATH
    export PATH=$dir/d/Microsoft\ VS\ Code:$PATH
    export PATH=$dir/d/gnuplot/bin:$PATH
    if [ "$SHELL" == "/bin/bash" ];then
        export PATH=$dir/d/cygwin64/bin:$PATH
    fi
}

function set_lang()
{
 export LANG=en_US.UTF-8
 export LANGUAGE=en_US.utf8
 export LC_CTYPE="en_US.utf8"
 export LC_NUMERIC="en_US.utf8"
 export LC_TIME="en_US.utf8"
 export LC_COLLATE="en_US.utf8"
 export LC_MONETARY="en_US.utf8"
 export LC_MESSAGES="en_US.utf8"
 export LC_PAPER="en_US.utf8"
 export LC_NAME="en_US.utf8"
 export LC_ADDRESS="en_US.utf8"
 export LC_TELEPHONE="en_US.utf8"
 export LC_MEASUREMENT="en_US.utf8"
 export LC_IDENTIFICATION="en_US.utf8"
 export LC_ALL=en_US.utf8
}

set_path
set_alias
set_lang

set -o vi

if [ "$SHELL" == "/bin/bash" ];then
    task list
fi

export TIME_STYLE="+%Y/%m/%d %H:%M:%S"
export TZ=Asia/Shanghai
export EDITOR=gvim
export SVN_EDITOR=vim

start vm
