# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# --------------------------------------------------------------------------- #
# user setting
# --------------------------------------------------------------------------- #
function print_error()
{
     echo -e "\e[31merror: $1\e[0m" && return 0
}

function print_warning()
{
     echo -e "\e[33mwarning: $1\e[0m" && return 0
}

function print_infor()
{
     echo -e "\e[32minfor: $1\e[0m" && return 0
}

function _backup_all()
{

    pushd . &> /dev/null

    cd ~/documents

    for folder in *
    do
        test -d "$folder" || continue
        cd "$folder"
        test -n "$(git status | grep "not a git repository")" && { cd ../ && continue; }
        git pull
        cd ../
    done

    popd
}

function _cp_linux()
{
    local the_machine=""
    case $1 in 
        mac)
            ping -c 1 -W 1 192.168.1.103 && 
            the_machine=huangmianbo@192.168.1.103
        ;;
        rasp4)
            ping -c 1 -W 1 192.168.1.106 && 
            the_machine=pi@192.168.1.106
        ;;
        *)
        :
        ;;
    esac

    test -n "$the_machine" || return 1
    test -d $2 && scp -r $2 $the_machine:/tmp/
    test -f $2 && scp -f $2 $the_machine:/tmp/
}

function _export_var()
{
    export HISTSIZE=10000
    export HISTFILESIZE=100000
    export HISTTIMEFORMAT="%F %T "
    export HISTIGNORE="ls::history:clear:pwd"
    export EDITOR=vim
    # export LLVM_PATH=/usr/local/clang/9.0.0/
    export LLVM_PATH=/usr/local/llvm/10.0.0/
    export LLVM_CONFI=/usr/local/llvm/10.0.0/bin/llvm-config
    # export DISPLAY="localhost:10.0"
    export LANG=en_US.UTF-8
    export LANGUAGE=en_US:en
    export LC_CTYPE="en_US.UTF-8"
    export LC_NUMERIC=en_US.UTF-8
    export LC_TIME=en_US.UTF-8
    export LC_COLLATE="en_US.UTF-8"
    export LC_MONETARY=en_US.UTF-8
    export LC_MESSAGES="en_US.UTF-8"
    export LC_PAPER=en_US.UTF-8
    export LC_NAME=en_US.UTF-8
    export LC_ADDRESS=en_US.UTF-8
    export LC_TELEPHONE=en_US.UTF-8
    export LC_MEASUREMENT=en_US.UTF-8
    export LC_IDENTIFICATION=en_US.UTF-8
    export LC_ALL=en_US.UTF-8
    export TASKDATA=~/documents/12-cygwin64-config-t580/.task
    export REPO_URL='https://mirrors.tuna.tsinghua.edu.cn/git/git-repo/' 
    test $USER == "root"  && export TMOUT=10
}

function _git-branch-prompt 
{
    local branch=$(git symbolic-ref --short -q HEAD 2>/dev/null)
    test -n "$branch" &&  printf " [%s]" $branch
}

function _gitlab()
{
        case $1 in
        on)
            test -n "$(sudo systemctl status gitlab-runsvdir.service  | grep Active | grep running)" || \
            { echo "start gitlab service" && sudo systemctl start gitlab-runsvdir.service; }
        ;;
        off)
            test -n "$(sudo systemctl status gitlab-runsvdir.service  | grep Active | grep running)" && \
            { echo "stop gitlab service" && sudo systemctl stop gitlab-runsvdir.service; }
        ;;
        backup)
            sudo gitlab-rake gitlab:backup:create
        ;;
        restore)
            read -p "do you want to restore to $2? y/n: " input
            test "$input" == "y" && test -n "$2" && sudo gitlab-rake gitlab:backup:restore BACKUP=$2
            test "$input" == "y" && { test -n "$2" || sudo gitlab-rake gitlab:backup:restore;  }
        ;;
        *)
            echo "gitlab on|off|backup|restore"
        ;;
        esac
}

function _login_machine()
{
    case $1 in
    beaglebone)
        case $2 in 
            1 | usb)
                ssh root@192.168.7.2
            ;;
            2 | eth0)
                ssh root@192.168.1.110
            ;;
            *)
                ssh root@192.168.1.110
            ;;
        esac
    ;;
    gitlab)
        ssh huangmianbo@192.168.56.103
    ;;
    googol)
        ssh googol@cbpos
    ;;
    gigabyte)
        ssh mianb@gigabyte-brix
    ;;
    giga)
        ssh mianb@192.168.1.102
    ;;
    mac)
        ssh huangmianbo@192.168.1.103
    ;;
    t430)
        ssh huangmianbo@t430
    ;;
    t580)
        ssh mianb@Huangs-T580
    ;;
    vm)
        ssh huangmianbo@vmware
    ;;
    *)
        echo "error ,please specify login machine name"
    ;;
    esac
}

function _log()
{
    test $# -eq 0 && { pushd ~/log/ &> /dev/null && return 0; }

    file=$(ls -t $* | head -n 1)
    test -f "$file" && vim "$file"
}

function _mydate()
{
    test -e "$1" && date '+%Y%m%d%H%M%S' -d "$(stat -c '%z' "$1")" && return 0;
    date +%Y%m%d%H%M
}

function _nohup()

{
    local file=/tmp/$(uuidgen | cut -c1-8)
    \nohup $* &> $file &
    tail -f $file
}

function _rand()
{
    test "$1" == "" && echo $RANDOM && return 0
    test "$2" == "" && echo $RANDOM && return 0
    let min=$1
    let max=$(($2-$min+1))
    num=$(cat /dev/urandom | head -n 10 | cksum | awk -F ' ' '{print $1}');
    echo $(($num%$max+$min))
}

function _randword()
{
    test "$(uname)"  == "Linux" && word_list=~/documents/18-bash-utils/00_en_dictionary_huge.dic
    test -n "$(uname | grep -i "cygwin")" && word_list=$dir/d/documents/18-bash-utils/00_en_dictionary_huge.dic
    test -f $word_list || { print_error "could not find file $word_list" && return 1; }
    let word_size=$(cat $word_list | grep "^[A-Z]" | wc -l)
    let line=$(uuidgen | cksum | cut -c 1-6)%$word_size
    cat $word_list | grep "^[A-Z]" | sed -n "$line p"
}

function _check_import_folder()
{
    case $1 in 
        /bin|/boot|/cdrom|/dev|\
        /etc|/home|/lib|/lib64|\
        /lost+found|/media|/mnt|\
        /opt|/proc|/root|/run|/sbin|\
        /snap|/srv|/sys|/tmp|/usr|/var|/home/huangmianbo)
            return 0
        ;;
        /bin/|/boot/|/cdrom/|/dev/|\
        /etc/|/home/|/lib/|/lib64/|\
        /lost+found/|/media/|/mnt/|\
        /opt/|/proc/|/root/|/run/|/sbin/|\
        /snap/|/srv/|/sys/|/tmp/|/usr/|/var/|/home/huangmianbo/)
            return 0
        ;;
        *)
            return 1
        ;;
    esac

    return 1;
}

function _sudo()
{
    local dest_folder_flag=1
    case $1 in 
        mv)
            for arg in $*
            do
                test "$arg" == "/dev/null" && print_error "mv to /dev/null is an error" && return 1;
                test -f "$arg"  && dest_folder_flag=0
                test -d "$arg"  && { _check_import_folder "$arg" || dest_folder_flag=0; }
                test $dest_folder_flag -eq 1 && test -d "$arg" &&  _check_import_folder "$arg" && print_error "mv $arg in not allowed!!" && return 1
            done
            \sudo $*
        ;;
        rm)
            test "$PWD" == "/" && print_error "you are in root dir is not allowed"
            for arg in $*
            do
                test "$arg" == "/" && print_error "rm root dir is not allowed" && return 1;
                test -d "$arg" && _check_import_folder "$arg" && print_error "rm $arg is not allowed!!"  && return 1
            done
            \sudo $*
        ;;
        *)
            \sudo $*
        ;;
    esac
}

function _savemv()
{
    local dest_folder_flag=1

    for arg in $*
    do
        test "$arg" == "/dev/null" &&  \
        print_error "mv to /dev/null is not allowed!!"  && \
        return 1
        test -f "$arg"  && dest_folder_flag=0
        test -d "$arg"  && { _check_import_folder "$arg" || dest_folder_flag=0; }
        test $dest_folder_flag -eq 1 && test -d "$arg" &&  _check_import_folder "$arg" && print_error "mv $arg in not allowed!!" && return 1
    done

    \mv -iv $*
}

function _saverm()
{
    test "$PWD" == "/" && print_error "you are in root dir!!" && return 1
    for arg in $*
    do
        test "$arg" == "/" && print_error "rm root dir is not allowed" && return 1;
        test -d "$arg" && _check_import_folder "$arg" && print_error "rm $arg is not allowed!!"  && return 1
    done;

    \rm -iv --preserve-root $@
}

function _set_alias()
{
	alias ....='cd ../../../'
	alias ...='cd ../../'
	alias ..='cd ../'
	alias config='vim ~/.bashrc'
	alias reload='source ~/.bashrc'
    alias bbb='beaglebone'
    alias beaglebone='_login_machine beaglebone'
    alias build='~/documents/18-bash-utils/07_build_src.sh'
    alias cp='cp -iv'
    alias cpmac='_cp_linux mac'
    alias cprasp4='_cp_linux rasp4'
    alias ctags='ctags -f .tags --output-format=e-ctags'
    alias cscope='cscope -Rbqk -f .cscope'
    alias cs='cscope -Rbqk -f .cscope'
    alias diff='colordiff'
    alias doc='cd ~/documents'
    alias giga='_login_machine giga'
    alias gitlab='_gitlab'
    alias log='_log'
    alias mac='_login_machine mac'
    alias mv='_savemv'
    alias mydate='_mydate'
    alias mygit='~/documents/18-bash-utils/25_git_utils.sh'
    alias makearm='make ARCH=arm CROSS_COMPILE=/usr/local/arm/gcc-linaro-5.3-2016.02-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-'
    alias nohup='_nohup'
    alias python='/usr/local/python/3.6.12/bin/python3.6'
    alias rand='_rand'
    alias randword='_randword'
    alias rasp4='ssh pi@192.168.1.106'
    alias rm='_saverm'
    # alias sudo='_sudo'
    alias temp='sensors | grep "Core"'
    alias tl='task list'
}

function _set_path()
{
	PATH=/usr/local/vim/bin:$PATH
    PATH=/usr/local/llvm/10.0.0/bin:$PATH
    PATH=/usr/local/clang/10.0.0/bin:$PATH
    PATH=/usr/local/cmake/bin:$PATH
    # PATH=/usr/local/clang/9.0.0/bin:$PATH
    PATH=/usr/local/gcc/9.3.0/bin:$PATH
    PATH=/opt/Xilinx/Vivado/2019.2/bin:$PATH
    PATH=/opt/Xilinx/DocNav:$PATH
    PATH=/opt/Xilinx/xic/bin:$PATH
    PATH=/opt/sda1/Xilinx-Vitis/Vitis/2019.2/bin:$PATH
    PATH=$HOME/scripts/:$PATH
    PATH=/usr/local/ctags-universal/bin:$PATH
	export PATH
}

function _set_PS1()
{
    PS1="\u@\h \[\033[0;36m\]\W\[\033[0m\]\[\033[0;32m\]\$(_git-branch-prompt)\[\033[0m\] \$ "
}

function _set_pkg_config_path()
{
	PKG_CONFIG_PATH=/usr/local/readline/lib/pkgconfig:$PKG_CONFIG_PATH
}

# ------------------------------------------------------------------
# ------------------------------------------------------------------
# ------------------------------------------------------------------
# Main Function 
function main()
{
    _export_var
    _set_path
    _set_alias
    _set_pkg_config_path
    _set_PS1

    # xmodmap -e "keycode 66 = Escape"
    set -o vi
}

main $*
